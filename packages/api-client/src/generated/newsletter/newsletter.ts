/**
 * Generated by orval v7.13.2 üç∫
 * Do not edit manually.
 * Cartop API
 * REST API documentation for Cartop backend services
 * OpenAPI spec version: 1.0
 */
import { useMutation, useQuery } from '@tanstack/react-query';
import type {
  MutationFunction,
  QueryFunction,
  QueryKey,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from '@tanstack/react-query';

import type {
  NewsletterControllerGetStats200Item,
  NewsletterControllerVerifyEmail200,
  SubscribeNewsletterDto,
  SubscriptionResponseDto,
  UnsubscribeNewsletterDto,
  UnsubscribeResponseDto,
} from '../rest-api.schemas';

import { customInstance } from '../../config/custom-instance';

type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];

/**
 * Subscribe an email address to the newsletter with optional filter preferences. Supports anonymous subscriptions and personalized filters for brands, models, and body types.
 * @summary Subscribe to newsletter
 */
export const newsletterControllerSubscribe = (
  subscribeNewsletterDto: SubscribeNewsletterDto,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<SubscriptionResponseDto>(
    {
      url: `/api/newsletter/subscribe`,
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      data: subscribeNewsletterDto,
      signal,
    },
    options,
  );
};

export const getNewsletterControllerSubscribeMutationOptions = <
  TError = void | void,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof newsletterControllerSubscribe>>,
    TError,
    { data: SubscribeNewsletterDto },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof newsletterControllerSubscribe>>,
  TError,
  { data: SubscribeNewsletterDto },
  TContext
> => {
  const mutationKey = ['newsletterControllerSubscribe'];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof newsletterControllerSubscribe>>,
    { data: SubscribeNewsletterDto }
  > = props => {
    const { data } = props ?? {};

    return newsletterControllerSubscribe(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type NewsletterControllerSubscribeMutationResult = NonNullable<
  Awaited<ReturnType<typeof newsletterControllerSubscribe>>
>;
export type NewsletterControllerSubscribeMutationBody = SubscribeNewsletterDto;
export type NewsletterControllerSubscribeMutationError = void | void;

/**
 * @summary Subscribe to newsletter
 */
export const useNewsletterControllerSubscribe = <
  TError = void | void,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof newsletterControllerSubscribe>>,
    TError,
    { data: SubscribeNewsletterDto },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationResult<
  Awaited<ReturnType<typeof newsletterControllerSubscribe>>,
  TError,
  { data: SubscribeNewsletterDto },
  TContext
> => {
  const mutationOptions = getNewsletterControllerSubscribeMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * Unsubscribe an email address from the newsletter. The subscription will be marked as unsubscribed but not deleted.
 * @summary Unsubscribe from newsletter
 */
export const newsletterControllerUnsubscribe = (
  unsubscribeNewsletterDto: UnsubscribeNewsletterDto,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<UnsubscribeResponseDto>(
    {
      url: `/api/newsletter/unsubscribe`,
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      data: unsubscribeNewsletterDto,
      signal,
    },
    options,
  );
};

export const getNewsletterControllerUnsubscribeMutationOptions = <
  TError = void | void,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof newsletterControllerUnsubscribe>>,
    TError,
    { data: UnsubscribeNewsletterDto },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof newsletterControllerUnsubscribe>>,
  TError,
  { data: UnsubscribeNewsletterDto },
  TContext
> => {
  const mutationKey = ['newsletterControllerUnsubscribe'];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof newsletterControllerUnsubscribe>>,
    { data: UnsubscribeNewsletterDto }
  > = props => {
    const { data } = props ?? {};

    return newsletterControllerUnsubscribe(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type NewsletterControllerUnsubscribeMutationResult = NonNullable<
  Awaited<ReturnType<typeof newsletterControllerUnsubscribe>>
>;
export type NewsletterControllerUnsubscribeMutationBody = UnsubscribeNewsletterDto;
export type NewsletterControllerUnsubscribeMutationError = void | void;

/**
 * @summary Unsubscribe from newsletter
 */
export const useNewsletterControllerUnsubscribe = <
  TError = void | void,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof newsletterControllerUnsubscribe>>,
    TError,
    { data: UnsubscribeNewsletterDto },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationResult<
  Awaited<ReturnType<typeof newsletterControllerUnsubscribe>>,
  TError,
  { data: UnsubscribeNewsletterDto },
  TContext
> => {
  const mutationOptions = getNewsletterControllerUnsubscribeMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * Verify a newsletter subscription using the token sent via email. Changes subscription status from pending to active.
 * @summary Verify email subscription
 */
export const newsletterControllerVerifyEmail = (
  token: string,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<NewsletterControllerVerifyEmail200>(
    { url: `/api/newsletter/verify/${token}`, method: 'GET', signal },
    options,
  );
};

export const getNewsletterControllerVerifyEmailQueryKey = (token?: string) => {
  return [`/api/newsletter/verify/${token}`] as const;
};

export const getNewsletterControllerVerifyEmailQueryOptions = <
  TData = Awaited<ReturnType<typeof newsletterControllerVerifyEmail>>,
  TError = void | void,
>(
  token: string,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof newsletterControllerVerifyEmail>>,
      TError,
      TData
    >;
    request?: SecondParameter<typeof customInstance>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getNewsletterControllerVerifyEmailQueryKey(token);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof newsletterControllerVerifyEmail>>> = ({
    signal,
  }) => newsletterControllerVerifyEmail(token, requestOptions, signal);

  return { queryKey, queryFn, enabled: !!token, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof newsletterControllerVerifyEmail>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type NewsletterControllerVerifyEmailQueryResult = NonNullable<
  Awaited<ReturnType<typeof newsletterControllerVerifyEmail>>
>;
export type NewsletterControllerVerifyEmailQueryError = void | void;

/**
 * @summary Verify email subscription
 */

export function useNewsletterControllerVerifyEmail<
  TData = Awaited<ReturnType<typeof newsletterControllerVerifyEmail>>,
  TError = void | void,
>(
  token: string,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof newsletterControllerVerifyEmail>>,
      TError,
      TData
    >;
    request?: SecondParameter<typeof customInstance>;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getNewsletterControllerVerifyEmailQueryOptions(token, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * Get statistics about newsletter subscriptions grouped by source. Useful for analytics and reporting.
 * @summary Get newsletter subscription statistics
 */
export const newsletterControllerGetStats = (
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<NewsletterControllerGetStats200Item[]>(
    { url: `/api/newsletter/stats`, method: 'GET', signal },
    options,
  );
};

export const getNewsletterControllerGetStatsQueryKey = () => {
  return [`/api/newsletter/stats`] as const;
};

export const getNewsletterControllerGetStatsQueryOptions = <
  TData = Awaited<ReturnType<typeof newsletterControllerGetStats>>,
  TError = unknown,
>(options?: {
  query?: UseQueryOptions<Awaited<ReturnType<typeof newsletterControllerGetStats>>, TError, TData>;
  request?: SecondParameter<typeof customInstance>;
}) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getNewsletterControllerGetStatsQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof newsletterControllerGetStats>>> = ({
    signal,
  }) => newsletterControllerGetStats(requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof newsletterControllerGetStats>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type NewsletterControllerGetStatsQueryResult = NonNullable<
  Awaited<ReturnType<typeof newsletterControllerGetStats>>
>;
export type NewsletterControllerGetStatsQueryError = unknown;

/**
 * @summary Get newsletter subscription statistics
 */

export function useNewsletterControllerGetStats<
  TData = Awaited<ReturnType<typeof newsletterControllerGetStats>>,
  TError = unknown,
>(options?: {
  query?: UseQueryOptions<Awaited<ReturnType<typeof newsletterControllerGetStats>>, TError, TData>;
  request?: SecondParameter<typeof customInstance>;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getNewsletterControllerGetStatsQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
}
