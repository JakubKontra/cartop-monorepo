/**
 * Generated by orval v7.13.2 üç∫
 * Do not edit manually.
 * Cartop API
 * REST API documentation for Cartop backend services
 * OpenAPI spec version: 1.0
 */
import { useMutation } from '@tanstack/react-query';
import type {
  MutationFunction,
  UseMutationOptions,
  UseMutationResult,
} from '@tanstack/react-query';

import type { TestEmailDto } from '../rest-api.schemas';

import { customInstance } from '../../config/custom-instance';

type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];

export const notificationControllerTestPasswordReset = (
  testEmailDto: TestEmailDto,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<void>(
    {
      url: `/notifications/test/password-reset`,
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      data: testEmailDto,
      signal,
    },
    options,
  );
};

export const getNotificationControllerTestPasswordResetMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof notificationControllerTestPasswordReset>>,
    TError,
    { data: TestEmailDto },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof notificationControllerTestPasswordReset>>,
  TError,
  { data: TestEmailDto },
  TContext
> => {
  const mutationKey = ['notificationControllerTestPasswordReset'];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof notificationControllerTestPasswordReset>>,
    { data: TestEmailDto }
  > = props => {
    const { data } = props ?? {};

    return notificationControllerTestPasswordReset(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type NotificationControllerTestPasswordResetMutationResult = NonNullable<
  Awaited<ReturnType<typeof notificationControllerTestPasswordReset>>
>;
export type NotificationControllerTestPasswordResetMutationBody = TestEmailDto;
export type NotificationControllerTestPasswordResetMutationError = unknown;

export const useNotificationControllerTestPasswordReset = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof notificationControllerTestPasswordReset>>,
    TError,
    { data: TestEmailDto },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationResult<
  Awaited<ReturnType<typeof notificationControllerTestPasswordReset>>,
  TError,
  { data: TestEmailDto },
  TContext
> => {
  const mutationOptions = getNotificationControllerTestPasswordResetMutationOptions(options);

  return useMutation(mutationOptions);
};
