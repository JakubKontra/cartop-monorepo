/**
 * Generated by orval v7.13.2 üç∫
 * Do not edit manually.
 * Cartop API
 * REST API documentation for Cartop backend services
 * OpenAPI spec version: 1.0
 */
import { useMutation, useQuery } from '@tanstack/react-query';
import type {
  MutationFunction,
  QueryFunction,
  QueryKey,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from '@tanstack/react-query';

import type {
  CreateTemplateDto,
  HealthCheckResponseDto,
  MarketingControllerCreateTemplate400,
  MarketingControllerCreateTemplate500,
  TemplateResponseDto,
} from '../rest-api.schemas';

import { customInstance } from '../../config/custom-instance';

type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];

/**
 * Creates an HTML email template from offer data and syncs it to Ecomail. The template is rendered using React Email and uploaded to Ecomail for use in campaigns. **Note:** This endpoint is publicly accessible for development/testing purposes.
 * @summary Create email template in Ecomail
 */
export const marketingControllerCreateTemplate = (
  createTemplateDto: CreateTemplateDto,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<TemplateResponseDto>(
    {
      url: `/api/marketing/ecomail/templates`,
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      data: createTemplateDto,
      signal,
    },
    options,
  );
};

export const getMarketingControllerCreateTemplateMutationOptions = <
  TError = MarketingControllerCreateTemplate400 | MarketingControllerCreateTemplate500,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof marketingControllerCreateTemplate>>,
    TError,
    { data: CreateTemplateDto },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof marketingControllerCreateTemplate>>,
  TError,
  { data: CreateTemplateDto },
  TContext
> => {
  const mutationKey = ['marketingControllerCreateTemplate'];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof marketingControllerCreateTemplate>>,
    { data: CreateTemplateDto }
  > = props => {
    const { data } = props ?? {};

    return marketingControllerCreateTemplate(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type MarketingControllerCreateTemplateMutationResult = NonNullable<
  Awaited<ReturnType<typeof marketingControllerCreateTemplate>>
>;
export type MarketingControllerCreateTemplateMutationBody = CreateTemplateDto;
export type MarketingControllerCreateTemplateMutationError =
  | MarketingControllerCreateTemplate400
  | MarketingControllerCreateTemplate500;

/**
 * @summary Create email template in Ecomail
 */
export const useMarketingControllerCreateTemplate = <
  TError = MarketingControllerCreateTemplate400 | MarketingControllerCreateTemplate500,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof marketingControllerCreateTemplate>>,
    TError,
    { data: CreateTemplateDto },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationResult<
  Awaited<ReturnType<typeof marketingControllerCreateTemplate>>,
  TError,
  { data: CreateTemplateDto },
  TContext
> => {
  const mutationOptions = getMarketingControllerCreateTemplateMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * Check if the marketing service and Ecomail integration are properly configured. Returns the status of the service and whether Ecomail API key is configured.
 * @summary Health check
 */
export const marketingControllerHealthCheck = (
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<HealthCheckResponseDto>(
    { url: `/api/marketing/health`, method: 'GET', signal },
    options,
  );
};

export const getMarketingControllerHealthCheckQueryKey = () => {
  return [`/api/marketing/health`] as const;
};

export const getMarketingControllerHealthCheckQueryOptions = <
  TData = Awaited<ReturnType<typeof marketingControllerHealthCheck>>,
  TError = unknown,
>(options?: {
  query?: UseQueryOptions<
    Awaited<ReturnType<typeof marketingControllerHealthCheck>>,
    TError,
    TData
  >;
  request?: SecondParameter<typeof customInstance>;
}) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getMarketingControllerHealthCheckQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof marketingControllerHealthCheck>>> = ({
    signal,
  }) => marketingControllerHealthCheck(requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof marketingControllerHealthCheck>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type MarketingControllerHealthCheckQueryResult = NonNullable<
  Awaited<ReturnType<typeof marketingControllerHealthCheck>>
>;
export type MarketingControllerHealthCheckQueryError = unknown;

/**
 * @summary Health check
 */

export function useMarketingControllerHealthCheck<
  TData = Awaited<ReturnType<typeof marketingControllerHealthCheck>>,
  TError = unknown,
>(options?: {
  query?: UseQueryOptions<
    Awaited<ReturnType<typeof marketingControllerHealthCheck>>,
    TError,
    TData
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getMarketingControllerHealthCheckQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
}
