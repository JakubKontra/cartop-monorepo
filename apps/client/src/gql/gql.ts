/* eslint-disable */
import * as types from './graphql';
import { TypedDocumentNode as DocumentNode } from '@graphql-typed-document-node/core';

/**
 * Map of all GraphQL operations in the project.
 *
 * This map has several performance disadvantages:
 * 1. It is not tree-shakeable, so it will include all operations in the project.
 * 2. It is not minifiable, so the string of a GraphQL query will be multiple times inside the bundle.
 * 3. It does not support dead code elimination, so it will add unused operations.
 *
 * Therefore it is highly recommended to use the babel or swc plugin for production.
 * Learn more about it here: https://the-guild.dev/graphql/codegen/plugins/presets/preset-client#reducing-bundle-size
 */
type Documents = {
    "\n  mutation RequestPasswordReset($input: RequestPasswordResetInput!) {\n    requestPasswordReset(input: $input) {\n      success\n      message\n    }\n  }\n": typeof types.RequestPasswordResetDocument,
    "\n  mutation ResetPassword($input: ResetPasswordInput!) {\n    resetPassword(input: $input) {\n      success\n      message\n    }\n  }\n": typeof types.ResetPasswordDocument,
    "\n  query GetCatalogBrands($activeOnly: Boolean, $limit: Float) {\n    catalogBrands(activeOnly: $activeOnly, limit: $limit) {\n      id\n      name\n      slug\n      description\n      isActive\n      isHighlighted\n      isRecommended\n      logo {\n        id\n        url\n        alt\n        width\n        height\n      }\n      createdAt\n      updatedAt\n    }\n  }\n": typeof types.GetCatalogBrandsDocument,
    "\n  query GetHighlightedBrands($limit: Float) {\n    highlightedCatalogBrands(limit: $limit) {\n      id\n      name\n      slug\n      description\n      isHighlighted\n      logo {\n        id\n        url\n        alt\n        width\n        height\n      }\n    }\n  }\n": typeof types.GetHighlightedBrandsDocument,
    "\n  query GetBrandBySlug($slug: String!) {\n    catalogBrandBySlug(slug: $slug) {\n      id\n      name\n      slug\n      description\n      isActive\n      isHighlighted\n      isRecommended\n      createdAt\n      updatedAt\n    }\n  }\n": typeof types.GetBrandBySlugDocument,
    "\n  query GetOnboardingByToken($token: String!) {\n    onboardingByToken(token: $token) {\n      id\n      token\n      status\n      expiresAt\n      completedAt\n      createdAt\n      carRequest {\n        id\n        requestFirstName\n        requestLastName\n        requestEmail\n        requestPhone\n        financingType\n        brand {\n          id\n          name\n        }\n        model {\n          id\n          name\n        }\n      }\n      leasingCompany {\n        id\n        name\n        link\n        logo {\n          id\n          url\n        }\n      }\n      documents {\n        id\n        uploadedAt\n        validationStatus\n        validationNote\n        file {\n          id\n          name\n          url\n          size\n          sizeFormatted\n          mimeType\n          extension\n        }\n        documentTemplate {\n          id\n          name\n          fieldName\n        }\n      }\n    }\n  }\n": typeof types.GetOnboardingByTokenDocument,
    "\n  query GetRequiredDocumentsByToken($token: String!) {\n    requiredDocumentsByToken(token: $token) {\n      id\n      name\n      fieldName\n      description\n      helpText\n      isRequired\n      acceptedFormats\n      maxSizeBytes\n      displayOrder\n    }\n  }\n": typeof types.GetRequiredDocumentsByTokenDocument,
    "\n  mutation UploadOnboardingDocument($token: String!, $input: UploadDocumentInput!) {\n    uploadOnboardingDocument(token: $token, input: $input) {\n      id\n      uploadedAt\n      validationStatus\n      file {\n        id\n        name\n        url\n        size\n        sizeFormatted\n        mimeType\n        extension\n      }\n      documentTemplate {\n        id\n        name\n        fieldName\n      }\n    }\n  }\n": typeof types.UploadOnboardingDocumentDocument,
    "\n  mutation GenerateUploadUrlPublic($filename: String!, $contentType: String!) {\n    generateUploadUrlPublic(filename: $filename, contentType: $contentType)\n  }\n": typeof types.GenerateUploadUrlPublicDocument,
    "\n  mutation CreateFilePublic($input: CreateFileInput!) {\n    createFilePublic(input: $input) {\n      id\n      name\n      url\n      relativePath\n      size\n      sizeFormatted\n      mimeType\n      extension\n      checksum\n      width\n      height\n      createdAt\n    }\n  }\n": typeof types.CreateFilePublicDocument,
    "\n  query GetPromotionalOffers($filters: OfferFiltersInput) {\n    publicOffers(filters: $filters) {\n      id\n      slug\n      type\n      description\n      isActive\n      isPublic\n      totalPrice\n      monthlyPayment\n      annualMileageLimit\n      leasingDurationMonths\n      discountAmount\n      discountPercentage\n      financingAvailable\n      includesWarranty\n      warrantyYears\n      hasServiceIncluded\n      hasWinterTyresIncluded\n      hasAssistanceServiceIncluded\n      hasGapIncluded\n      brand {\n        id\n        name\n        slug\n        logo {\n          id\n          url\n          alt\n          width\n          height\n        }\n      }\n      model {\n        id\n        name\n        slug\n      }\n      modelGeneration {\n        id\n        name\n        slug\n        bodyType\n        description\n      }\n      createdAt\n      updatedAt\n    }\n  }\n": typeof types.GetPromotionalOffersDocument,
    "\n  query GetOperationalLeasingOffers($filters: OfferFiltersInput) {\n    operationalLeasingOffers(filters: $filters) {\n      id\n      slug\n      type\n      description\n      isActive\n      isPublic\n      totalPrice\n      monthlyPayment\n      annualMileageLimit\n      leasingDurationMonths\n      hasServiceIncluded\n      hasWinterTyresIncluded\n      hasAssistanceServiceIncluded\n      hasGapIncluded\n      brand {\n        id\n        name\n        slug\n        logo {\n          id\n          url\n          alt\n          width\n          height\n        }\n      }\n      model {\n        id\n        name\n        slug\n      }\n      modelGeneration {\n        id\n        name\n        slug\n        bodyType\n        description\n      }\n      createdAt\n      updatedAt\n    }\n  }\n": typeof types.GetOperationalLeasingOffersDocument,
    "\n  query GetDirectPurchaseOffers($filters: OfferFiltersInput) {\n    directPurchaseOffers(filters: $filters) {\n      id\n      slug\n      type\n      description\n      isActive\n      isPublic\n      totalPrice\n      discountAmount\n      discountPercentage\n      financingAvailable\n      includesWarranty\n      warrantyYears\n      brand {\n        id\n        name\n        slug\n        logo {\n          id\n          url\n          alt\n          width\n          height\n        }\n      }\n      model {\n        id\n        name\n        slug\n      }\n      modelGeneration {\n        id\n        name\n        slug\n        bodyType\n        description\n      }\n      createdAt\n      updatedAt\n    }\n  }\n": typeof types.GetDirectPurchaseOffersDocument,
};
const documents: Documents = {
    "\n  mutation RequestPasswordReset($input: RequestPasswordResetInput!) {\n    requestPasswordReset(input: $input) {\n      success\n      message\n    }\n  }\n": types.RequestPasswordResetDocument,
    "\n  mutation ResetPassword($input: ResetPasswordInput!) {\n    resetPassword(input: $input) {\n      success\n      message\n    }\n  }\n": types.ResetPasswordDocument,
    "\n  query GetCatalogBrands($activeOnly: Boolean, $limit: Float) {\n    catalogBrands(activeOnly: $activeOnly, limit: $limit) {\n      id\n      name\n      slug\n      description\n      isActive\n      isHighlighted\n      isRecommended\n      logo {\n        id\n        url\n        alt\n        width\n        height\n      }\n      createdAt\n      updatedAt\n    }\n  }\n": types.GetCatalogBrandsDocument,
    "\n  query GetHighlightedBrands($limit: Float) {\n    highlightedCatalogBrands(limit: $limit) {\n      id\n      name\n      slug\n      description\n      isHighlighted\n      logo {\n        id\n        url\n        alt\n        width\n        height\n      }\n    }\n  }\n": types.GetHighlightedBrandsDocument,
    "\n  query GetBrandBySlug($slug: String!) {\n    catalogBrandBySlug(slug: $slug) {\n      id\n      name\n      slug\n      description\n      isActive\n      isHighlighted\n      isRecommended\n      createdAt\n      updatedAt\n    }\n  }\n": types.GetBrandBySlugDocument,
    "\n  query GetOnboardingByToken($token: String!) {\n    onboardingByToken(token: $token) {\n      id\n      token\n      status\n      expiresAt\n      completedAt\n      createdAt\n      carRequest {\n        id\n        requestFirstName\n        requestLastName\n        requestEmail\n        requestPhone\n        financingType\n        brand {\n          id\n          name\n        }\n        model {\n          id\n          name\n        }\n      }\n      leasingCompany {\n        id\n        name\n        link\n        logo {\n          id\n          url\n        }\n      }\n      documents {\n        id\n        uploadedAt\n        validationStatus\n        validationNote\n        file {\n          id\n          name\n          url\n          size\n          sizeFormatted\n          mimeType\n          extension\n        }\n        documentTemplate {\n          id\n          name\n          fieldName\n        }\n      }\n    }\n  }\n": types.GetOnboardingByTokenDocument,
    "\n  query GetRequiredDocumentsByToken($token: String!) {\n    requiredDocumentsByToken(token: $token) {\n      id\n      name\n      fieldName\n      description\n      helpText\n      isRequired\n      acceptedFormats\n      maxSizeBytes\n      displayOrder\n    }\n  }\n": types.GetRequiredDocumentsByTokenDocument,
    "\n  mutation UploadOnboardingDocument($token: String!, $input: UploadDocumentInput!) {\n    uploadOnboardingDocument(token: $token, input: $input) {\n      id\n      uploadedAt\n      validationStatus\n      file {\n        id\n        name\n        url\n        size\n        sizeFormatted\n        mimeType\n        extension\n      }\n      documentTemplate {\n        id\n        name\n        fieldName\n      }\n    }\n  }\n": types.UploadOnboardingDocumentDocument,
    "\n  mutation GenerateUploadUrlPublic($filename: String!, $contentType: String!) {\n    generateUploadUrlPublic(filename: $filename, contentType: $contentType)\n  }\n": types.GenerateUploadUrlPublicDocument,
    "\n  mutation CreateFilePublic($input: CreateFileInput!) {\n    createFilePublic(input: $input) {\n      id\n      name\n      url\n      relativePath\n      size\n      sizeFormatted\n      mimeType\n      extension\n      checksum\n      width\n      height\n      createdAt\n    }\n  }\n": types.CreateFilePublicDocument,
    "\n  query GetPromotionalOffers($filters: OfferFiltersInput) {\n    publicOffers(filters: $filters) {\n      id\n      slug\n      type\n      description\n      isActive\n      isPublic\n      totalPrice\n      monthlyPayment\n      annualMileageLimit\n      leasingDurationMonths\n      discountAmount\n      discountPercentage\n      financingAvailable\n      includesWarranty\n      warrantyYears\n      hasServiceIncluded\n      hasWinterTyresIncluded\n      hasAssistanceServiceIncluded\n      hasGapIncluded\n      brand {\n        id\n        name\n        slug\n        logo {\n          id\n          url\n          alt\n          width\n          height\n        }\n      }\n      model {\n        id\n        name\n        slug\n      }\n      modelGeneration {\n        id\n        name\n        slug\n        bodyType\n        description\n      }\n      createdAt\n      updatedAt\n    }\n  }\n": types.GetPromotionalOffersDocument,
    "\n  query GetOperationalLeasingOffers($filters: OfferFiltersInput) {\n    operationalLeasingOffers(filters: $filters) {\n      id\n      slug\n      type\n      description\n      isActive\n      isPublic\n      totalPrice\n      monthlyPayment\n      annualMileageLimit\n      leasingDurationMonths\n      hasServiceIncluded\n      hasWinterTyresIncluded\n      hasAssistanceServiceIncluded\n      hasGapIncluded\n      brand {\n        id\n        name\n        slug\n        logo {\n          id\n          url\n          alt\n          width\n          height\n        }\n      }\n      model {\n        id\n        name\n        slug\n      }\n      modelGeneration {\n        id\n        name\n        slug\n        bodyType\n        description\n      }\n      createdAt\n      updatedAt\n    }\n  }\n": types.GetOperationalLeasingOffersDocument,
    "\n  query GetDirectPurchaseOffers($filters: OfferFiltersInput) {\n    directPurchaseOffers(filters: $filters) {\n      id\n      slug\n      type\n      description\n      isActive\n      isPublic\n      totalPrice\n      discountAmount\n      discountPercentage\n      financingAvailable\n      includesWarranty\n      warrantyYears\n      brand {\n        id\n        name\n        slug\n        logo {\n          id\n          url\n          alt\n          width\n          height\n        }\n      }\n      model {\n        id\n        name\n        slug\n      }\n      modelGeneration {\n        id\n        name\n        slug\n        bodyType\n        description\n      }\n      createdAt\n      updatedAt\n    }\n  }\n": types.GetDirectPurchaseOffersDocument,
};

/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 *
 *
 * @example
 * ```ts
 * const query = graphql(`query GetUser($id: ID!) { user(id: $id) { name } }`);
 * ```
 *
 * The query argument is unknown!
 * Please regenerate the types.
 */
export function graphql(source: string): unknown;

/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation RequestPasswordReset($input: RequestPasswordResetInput!) {\n    requestPasswordReset(input: $input) {\n      success\n      message\n    }\n  }\n"): (typeof documents)["\n  mutation RequestPasswordReset($input: RequestPasswordResetInput!) {\n    requestPasswordReset(input: $input) {\n      success\n      message\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation ResetPassword($input: ResetPasswordInput!) {\n    resetPassword(input: $input) {\n      success\n      message\n    }\n  }\n"): (typeof documents)["\n  mutation ResetPassword($input: ResetPasswordInput!) {\n    resetPassword(input: $input) {\n      success\n      message\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query GetCatalogBrands($activeOnly: Boolean, $limit: Float) {\n    catalogBrands(activeOnly: $activeOnly, limit: $limit) {\n      id\n      name\n      slug\n      description\n      isActive\n      isHighlighted\n      isRecommended\n      logo {\n        id\n        url\n        alt\n        width\n        height\n      }\n      createdAt\n      updatedAt\n    }\n  }\n"): (typeof documents)["\n  query GetCatalogBrands($activeOnly: Boolean, $limit: Float) {\n    catalogBrands(activeOnly: $activeOnly, limit: $limit) {\n      id\n      name\n      slug\n      description\n      isActive\n      isHighlighted\n      isRecommended\n      logo {\n        id\n        url\n        alt\n        width\n        height\n      }\n      createdAt\n      updatedAt\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query GetHighlightedBrands($limit: Float) {\n    highlightedCatalogBrands(limit: $limit) {\n      id\n      name\n      slug\n      description\n      isHighlighted\n      logo {\n        id\n        url\n        alt\n        width\n        height\n      }\n    }\n  }\n"): (typeof documents)["\n  query GetHighlightedBrands($limit: Float) {\n    highlightedCatalogBrands(limit: $limit) {\n      id\n      name\n      slug\n      description\n      isHighlighted\n      logo {\n        id\n        url\n        alt\n        width\n        height\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query GetBrandBySlug($slug: String!) {\n    catalogBrandBySlug(slug: $slug) {\n      id\n      name\n      slug\n      description\n      isActive\n      isHighlighted\n      isRecommended\n      createdAt\n      updatedAt\n    }\n  }\n"): (typeof documents)["\n  query GetBrandBySlug($slug: String!) {\n    catalogBrandBySlug(slug: $slug) {\n      id\n      name\n      slug\n      description\n      isActive\n      isHighlighted\n      isRecommended\n      createdAt\n      updatedAt\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query GetOnboardingByToken($token: String!) {\n    onboardingByToken(token: $token) {\n      id\n      token\n      status\n      expiresAt\n      completedAt\n      createdAt\n      carRequest {\n        id\n        requestFirstName\n        requestLastName\n        requestEmail\n        requestPhone\n        financingType\n        brand {\n          id\n          name\n        }\n        model {\n          id\n          name\n        }\n      }\n      leasingCompany {\n        id\n        name\n        link\n        logo {\n          id\n          url\n        }\n      }\n      documents {\n        id\n        uploadedAt\n        validationStatus\n        validationNote\n        file {\n          id\n          name\n          url\n          size\n          sizeFormatted\n          mimeType\n          extension\n        }\n        documentTemplate {\n          id\n          name\n          fieldName\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query GetOnboardingByToken($token: String!) {\n    onboardingByToken(token: $token) {\n      id\n      token\n      status\n      expiresAt\n      completedAt\n      createdAt\n      carRequest {\n        id\n        requestFirstName\n        requestLastName\n        requestEmail\n        requestPhone\n        financingType\n        brand {\n          id\n          name\n        }\n        model {\n          id\n          name\n        }\n      }\n      leasingCompany {\n        id\n        name\n        link\n        logo {\n          id\n          url\n        }\n      }\n      documents {\n        id\n        uploadedAt\n        validationStatus\n        validationNote\n        file {\n          id\n          name\n          url\n          size\n          sizeFormatted\n          mimeType\n          extension\n        }\n        documentTemplate {\n          id\n          name\n          fieldName\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query GetRequiredDocumentsByToken($token: String!) {\n    requiredDocumentsByToken(token: $token) {\n      id\n      name\n      fieldName\n      description\n      helpText\n      isRequired\n      acceptedFormats\n      maxSizeBytes\n      displayOrder\n    }\n  }\n"): (typeof documents)["\n  query GetRequiredDocumentsByToken($token: String!) {\n    requiredDocumentsByToken(token: $token) {\n      id\n      name\n      fieldName\n      description\n      helpText\n      isRequired\n      acceptedFormats\n      maxSizeBytes\n      displayOrder\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation UploadOnboardingDocument($token: String!, $input: UploadDocumentInput!) {\n    uploadOnboardingDocument(token: $token, input: $input) {\n      id\n      uploadedAt\n      validationStatus\n      file {\n        id\n        name\n        url\n        size\n        sizeFormatted\n        mimeType\n        extension\n      }\n      documentTemplate {\n        id\n        name\n        fieldName\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation UploadOnboardingDocument($token: String!, $input: UploadDocumentInput!) {\n    uploadOnboardingDocument(token: $token, input: $input) {\n      id\n      uploadedAt\n      validationStatus\n      file {\n        id\n        name\n        url\n        size\n        sizeFormatted\n        mimeType\n        extension\n      }\n      documentTemplate {\n        id\n        name\n        fieldName\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation GenerateUploadUrlPublic($filename: String!, $contentType: String!) {\n    generateUploadUrlPublic(filename: $filename, contentType: $contentType)\n  }\n"): (typeof documents)["\n  mutation GenerateUploadUrlPublic($filename: String!, $contentType: String!) {\n    generateUploadUrlPublic(filename: $filename, contentType: $contentType)\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation CreateFilePublic($input: CreateFileInput!) {\n    createFilePublic(input: $input) {\n      id\n      name\n      url\n      relativePath\n      size\n      sizeFormatted\n      mimeType\n      extension\n      checksum\n      width\n      height\n      createdAt\n    }\n  }\n"): (typeof documents)["\n  mutation CreateFilePublic($input: CreateFileInput!) {\n    createFilePublic(input: $input) {\n      id\n      name\n      url\n      relativePath\n      size\n      sizeFormatted\n      mimeType\n      extension\n      checksum\n      width\n      height\n      createdAt\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query GetPromotionalOffers($filters: OfferFiltersInput) {\n    publicOffers(filters: $filters) {\n      id\n      slug\n      type\n      description\n      isActive\n      isPublic\n      totalPrice\n      monthlyPayment\n      annualMileageLimit\n      leasingDurationMonths\n      discountAmount\n      discountPercentage\n      financingAvailable\n      includesWarranty\n      warrantyYears\n      hasServiceIncluded\n      hasWinterTyresIncluded\n      hasAssistanceServiceIncluded\n      hasGapIncluded\n      brand {\n        id\n        name\n        slug\n        logo {\n          id\n          url\n          alt\n          width\n          height\n        }\n      }\n      model {\n        id\n        name\n        slug\n      }\n      modelGeneration {\n        id\n        name\n        slug\n        bodyType\n        description\n      }\n      createdAt\n      updatedAt\n    }\n  }\n"): (typeof documents)["\n  query GetPromotionalOffers($filters: OfferFiltersInput) {\n    publicOffers(filters: $filters) {\n      id\n      slug\n      type\n      description\n      isActive\n      isPublic\n      totalPrice\n      monthlyPayment\n      annualMileageLimit\n      leasingDurationMonths\n      discountAmount\n      discountPercentage\n      financingAvailable\n      includesWarranty\n      warrantyYears\n      hasServiceIncluded\n      hasWinterTyresIncluded\n      hasAssistanceServiceIncluded\n      hasGapIncluded\n      brand {\n        id\n        name\n        slug\n        logo {\n          id\n          url\n          alt\n          width\n          height\n        }\n      }\n      model {\n        id\n        name\n        slug\n      }\n      modelGeneration {\n        id\n        name\n        slug\n        bodyType\n        description\n      }\n      createdAt\n      updatedAt\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query GetOperationalLeasingOffers($filters: OfferFiltersInput) {\n    operationalLeasingOffers(filters: $filters) {\n      id\n      slug\n      type\n      description\n      isActive\n      isPublic\n      totalPrice\n      monthlyPayment\n      annualMileageLimit\n      leasingDurationMonths\n      hasServiceIncluded\n      hasWinterTyresIncluded\n      hasAssistanceServiceIncluded\n      hasGapIncluded\n      brand {\n        id\n        name\n        slug\n        logo {\n          id\n          url\n          alt\n          width\n          height\n        }\n      }\n      model {\n        id\n        name\n        slug\n      }\n      modelGeneration {\n        id\n        name\n        slug\n        bodyType\n        description\n      }\n      createdAt\n      updatedAt\n    }\n  }\n"): (typeof documents)["\n  query GetOperationalLeasingOffers($filters: OfferFiltersInput) {\n    operationalLeasingOffers(filters: $filters) {\n      id\n      slug\n      type\n      description\n      isActive\n      isPublic\n      totalPrice\n      monthlyPayment\n      annualMileageLimit\n      leasingDurationMonths\n      hasServiceIncluded\n      hasWinterTyresIncluded\n      hasAssistanceServiceIncluded\n      hasGapIncluded\n      brand {\n        id\n        name\n        slug\n        logo {\n          id\n          url\n          alt\n          width\n          height\n        }\n      }\n      model {\n        id\n        name\n        slug\n      }\n      modelGeneration {\n        id\n        name\n        slug\n        bodyType\n        description\n      }\n      createdAt\n      updatedAt\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query GetDirectPurchaseOffers($filters: OfferFiltersInput) {\n    directPurchaseOffers(filters: $filters) {\n      id\n      slug\n      type\n      description\n      isActive\n      isPublic\n      totalPrice\n      discountAmount\n      discountPercentage\n      financingAvailable\n      includesWarranty\n      warrantyYears\n      brand {\n        id\n        name\n        slug\n        logo {\n          id\n          url\n          alt\n          width\n          height\n        }\n      }\n      model {\n        id\n        name\n        slug\n      }\n      modelGeneration {\n        id\n        name\n        slug\n        bodyType\n        description\n      }\n      createdAt\n      updatedAt\n    }\n  }\n"): (typeof documents)["\n  query GetDirectPurchaseOffers($filters: OfferFiltersInput) {\n    directPurchaseOffers(filters: $filters) {\n      id\n      slug\n      type\n      description\n      isActive\n      isPublic\n      totalPrice\n      discountAmount\n      discountPercentage\n      financingAvailable\n      includesWarranty\n      warrantyYears\n      brand {\n        id\n        name\n        slug\n        logo {\n          id\n          url\n          alt\n          width\n          height\n        }\n      }\n      model {\n        id\n        name\n        slug\n      }\n      modelGeneration {\n        id\n        name\n        slug\n        bodyType\n        description\n      }\n      createdAt\n      updatedAt\n    }\n  }\n"];

export function graphql(source: string) {
  return (documents as any)[source] ?? {};
}

export type DocumentType<TDocumentNode extends DocumentNode<any, any>> = TDocumentNode extends DocumentNode<  infer TType,  any>  ? TType  : never;