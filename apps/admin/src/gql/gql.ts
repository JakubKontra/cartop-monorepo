/* eslint-disable */
import * as types from './graphql';
import { TypedDocumentNode as DocumentNode } from '@graphql-typed-document-node/core';

/**
 * Map of all GraphQL operations in the project.
 *
 * This map has several performance disadvantages:
 * 1. It is not tree-shakeable, so it will include all operations in the project.
 * 2. It is not minifiable, so the string of a GraphQL query will be multiple times inside the bundle.
 * 3. It does not support dead code elimination, so it will add unused operations.
 *
 * Therefore it is highly recommended to use the babel or swc plugin for production.
 * Learn more about it here: https://the-guild.dev/graphql/codegen/plugins/presets/preset-client#reducing-bundle-size
 */
type Documents = {
    "\n  mutation Login($input: LoginInput!) {\n    login(input: $input) {\n      accessToken\n      refreshToken\n      user {\n        id\n        email\n        firstName\n        lastName\n        roles\n        isActive\n      }\n    }\n  }\n": typeof types.LoginDocument,
    "\n  mutation RefreshToken($input: RefreshTokenInput!) {\n    refreshToken(input: $input) {\n      accessToken\n      refreshToken\n      user {\n        id\n        email\n        firstName\n        lastName\n        roles\n        isActive\n      }\n    }\n  }\n": typeof types.RefreshTokenDocument,
    "\n  mutation ImpersonateUser($input: ImpersonateInput!) {\n    impersonateUser(input: $input) {\n      accessToken\n      refreshToken\n      impersonatedUser {\n        id\n        email\n        firstName\n        lastName\n        roles\n        isActive\n      }\n      originalUser {\n        id\n        email\n        firstName\n        lastName\n        roles\n        isActive\n      }\n    }\n  }\n": typeof types.ImpersonateUserDocument,
    "\n  mutation StopImpersonation {\n    stopImpersonation {\n      accessToken\n      refreshToken\n      user {\n        id\n        email\n        firstName\n        lastName\n        roles\n        isActive\n      }\n    }\n  }\n": typeof types.StopImpersonationDocument,
    "\n  query GetAllBrandEquipments($limit: Float, $offset: Float, $brandId: String) {\n    allBrandEquipments(limit: $limit, offset: $offset, brandId: $brandId) {\n      id\n      name\n      description\n      brandId\n      brand {\n        id\n        name\n        slug\n      }\n      assignedItems {\n        id\n        name\n        legacySystemId\n      }\n      createdAt\n      updatedAt\n    }\n  }\n": typeof types.GetAllBrandEquipmentsDocument,
    "\n  query GetBrandEquipment($id: String!) {\n    brandEquipment(id: $id) {\n      id\n      name\n      description\n      brandId\n      brand {\n        id\n        name\n        slug\n      }\n      assignedItems {\n        id\n        name\n        legacySystemId\n      }\n      createdAt\n      updatedAt\n    }\n  }\n": typeof types.GetBrandEquipmentDocument,
    "\n  query SearchBrandEquipments($query: String!, $limit: Float) {\n    searchBrandEquipments(query: $query, limit: $limit) {\n      id\n      name\n      description\n      brandId\n      brand {\n        id\n        name\n        slug\n      }\n    }\n  }\n": typeof types.SearchBrandEquipmentsDocument,
    "\n  query GetBrandEquipmentsCount($brandId: String) {\n    brandEquipmentsCount(brandId: $brandId)\n  }\n": typeof types.GetBrandEquipmentsCountDocument,
    "\n  mutation CreateBrandEquipment($input: CreateCatalogBrandEquipmentInput!) {\n    createBrandEquipment(input: $input) {\n      id\n      name\n      description\n      brandId\n      brand {\n        id\n        name\n        slug\n      }\n      assignedItems {\n        id\n        name\n        legacySystemId\n      }\n      createdAt\n      updatedAt\n    }\n  }\n": typeof types.CreateBrandEquipmentDocument,
    "\n  mutation UpdateBrandEquipment($id: String!, $input: UpdateCatalogBrandEquipmentInput!) {\n    updateBrandEquipment(id: $id, input: $input) {\n      id\n      name\n      description\n      brandId\n      brand {\n        id\n        name\n        slug\n      }\n      assignedItems {\n        id\n        name\n        legacySystemId\n      }\n      createdAt\n      updatedAt\n    }\n  }\n": typeof types.UpdateBrandEquipmentDocument,
    "\n  mutation DeleteBrandEquipment($id: String!) {\n    deleteBrandEquipment(id: $id)\n  }\n": typeof types.DeleteBrandEquipmentDocument,
    "\n  query GetAllCatalogBrands($limit: Float, $offset: Float) {\n    allCatalogBrands(limit: $limit, offset: $offset) {\n      id\n      name\n      slug\n      description\n      isActive\n      isHighlighted\n      isRecommended\n      logoId\n      logo {\n        id\n        url\n        alt\n      }\n      legacySystemId\n      legacySlug\n      createdAt\n      updatedAt\n    }\n  }\n": typeof types.GetAllCatalogBrandsDocument,
    "\n  query GetCatalogBrand($id: String!) {\n    catalogBrand(id: $id) {\n      id\n      name\n      slug\n      description\n      isActive\n      isHighlighted\n      isRecommended\n      logoId\n      logo {\n        id\n        url\n        alt\n      }\n      legacySystemId\n      legacySlug\n      createdAt\n      updatedAt\n    }\n  }\n": typeof types.GetCatalogBrandDocument,
    "\n  mutation CreateCatalogBrand($input: CreateCatalogBrandInput!) {\n    createCatalogBrand(input: $input) {\n      id\n      name\n      slug\n      description\n      isActive\n      isHighlighted\n      isRecommended\n      logoId\n      logo {\n        id\n        url\n        alt\n      }\n      legacySystemId\n      legacySlug\n      createdAt\n      updatedAt\n    }\n  }\n": typeof types.CreateCatalogBrandDocument,
    "\n  mutation UpdateCatalogBrand($id: String!, $input: UpdateCatalogBrandInput!) {\n    updateCatalogBrand(id: $id, input: $input) {\n      id\n      name\n      slug\n      description\n      isActive\n      isHighlighted\n      isRecommended\n      logoId\n      logo {\n        id\n        url\n        alt\n      }\n      createdAt\n      updatedAt\n    }\n  }\n": typeof types.UpdateCatalogBrandDocument,
    "\n  mutation DeleteCatalogBrand($id: String!) {\n    deleteCatalogBrand(id: $id)\n  }\n": typeof types.DeleteCatalogBrandDocument,
    "\n  query CheckBrandSlug($slug: String!) {\n    checkBrandSlugAvailability(slug: $slug) {\n      id\n      slug\n    }\n  }\n": typeof types.CheckBrandSlugDocument,
    "\n  query GetLeasingCompanies {\n    leasingCompanies {\n      id\n      name\n    }\n  }\n": typeof types.GetLeasingCompaniesDocument,
    "\n  fragment CalculationItem on CarRequestCalculationItem {\n    id\n    itemType\n    name\n    description\n    priceImpact\n    isRequired\n    isIncluded\n    displayOrder\n    catalogColor {\n      id\n      name\n      color\n    }\n    createdAt\n  }\n": typeof types.CalculationItemFragmentDoc,
    "\n  fragment CalculationOffer on CarRequestCalculationOffer {\n    id\n    status\n    monthlyPayment\n    downPayment\n    totalPrice\n    interestRate\n    adminFee\n    includesService\n    includesWinterTires\n    includesGap\n    includesAssistance\n    termsAndConditions\n    validUntil\n    notes\n    leasingCompany {\n      id\n      name\n      logo {\n        id\n        url\n      }\n    }\n    quotedBy {\n      id\n      firstName\n      lastName\n      email\n    }\n    quotedAt\n    createdAt\n    updatedAt\n  }\n": typeof types.CalculationOfferFragmentDoc,
    "\n  fragment Calculation on CarRequestCalculation {\n    id\n    version\n    status\n    durationMonths\n    annualMileageKm\n    deliveryExpectedAt\n    notes\n    internalNotes\n    requestedBy {\n      id\n      firstName\n      lastName\n      email\n    }\n    assignedTo {\n      id\n      firstName\n      lastName\n      email\n    }\n    createdAt\n    updatedAt\n    submittedAt\n    completedAt\n  }\n": typeof types.CalculationFragmentDoc,
    "\n  query GetCalculation($id: ID!) {\n    calculation(id: $id) {\n      ...Calculation\n      carRequest {\n        id\n        brand {\n          id\n          name\n        }\n        model {\n          id\n          name\n        }\n      }\n      offers {\n        ...CalculationOffer\n      }\n      items {\n        ...CalculationItem\n      }\n    }\n  }\n": typeof types.GetCalculationDocument,
    "\n  query GetCalculationsByCarRequest($carRequestId: ID!) {\n    calculationsByCarRequest(carRequestId: $carRequestId) {\n      ...Calculation\n      offers {\n        id\n        status\n        leasingCompany {\n          id\n          name\n        }\n      }\n      items {\n        id\n        itemType\n        name\n      }\n    }\n  }\n": typeof types.GetCalculationsByCarRequestDocument,
    "\n  query GetPendingCalculations {\n    pendingCalculations {\n      ...Calculation\n      carRequest {\n        id\n        brand {\n          id\n          name\n        }\n        model {\n          id\n          name\n        }\n        customer {\n          id\n          firstName\n          lastName\n          email\n        }\n      }\n      offers {\n        id\n        status\n        leasingCompany {\n          id\n          name\n        }\n      }\n    }\n  }\n": typeof types.GetPendingCalculationsDocument,
    "\n  mutation CreateCalculation($input: CreateCalculationInput!) {\n    createCalculation(input: $input) {\n      ...Calculation\n    }\n  }\n": typeof types.CreateCalculationDocument,
    "\n  mutation UpdateCalculation($id: ID!, $input: UpdateCalculationInput!) {\n    updateCalculation(id: $id, input: $input) {\n      ...Calculation\n    }\n  }\n": typeof types.UpdateCalculationDocument,
    "\n  mutation SubmitCalculation($id: ID!) {\n    submitCalculation(id: $id) {\n      ...Calculation\n    }\n  }\n": typeof types.SubmitCalculationDocument,
    "\n  mutation StartProcessingCalculation($id: ID!) {\n    startProcessingCalculation(id: $id) {\n      ...Calculation\n    }\n  }\n": typeof types.StartProcessingCalculationDocument,
    "\n  mutation CompleteCalculation($id: ID!) {\n    completeCalculation(id: $id) {\n      ...Calculation\n    }\n  }\n": typeof types.CompleteCalculationDocument,
    "\n  mutation AddOfferQuote($input: AddOfferQuoteInput!) {\n    addOfferQuote(input: $input) {\n      ...CalculationOffer\n    }\n  }\n": typeof types.AddOfferQuoteDocument,
    "\n  mutation UpdateOfferQuote($offerId: ID!, $input: UpdateOfferQuoteInput!) {\n    updateOfferQuote(offerId: $offerId, input: $input) {\n      ...CalculationOffer\n    }\n  }\n": typeof types.UpdateOfferQuoteDocument,
    "\n  mutation DeleteCalculation($id: ID!) {\n    deleteCalculation(id: $id)\n  }\n": typeof types.DeleteCalculationDocument,
    "\n  query CarRequestsDashboardStats {\n    carRequestsDashboardStats {\n      overview {\n        activeCarRequests\n        totalVehicles\n        awaitingAction\n        completedOnboardingsThisMonth\n        activeCarRequestsChange\n        totalVehiclesChange\n      }\n      topBrands {\n        brandId\n        brandName\n        calculationsCount\n        percentage\n      }\n      agentPerformance {\n        agentId\n        agentName\n        carRequestsCount\n        vehiclesCount\n        conversionRate\n        averageProcessingDays\n      }\n      leasingCompanies {\n        leasingCompanyId\n        leasingCompanyName\n        calculationsCount\n        completedOnboardingsCount\n        conversionRate\n      }\n      timeline {\n        date\n        newCarRequests\n        completedOnboardings\n      }\n      funnel {\n        created\n        hasOffers\n        leasingCompanySelected\n        onboardingComplete\n        ordered\n      }\n    }\n  }\n": typeof types.CarRequestsDashboardStatsDocument,
    "\n  query GetAllCarRequests($limit: Float, $offset: Float) {\n    allCarRequests(limit: $limit, offset: $offset) {\n      id\n      isFromLegacySystem\n      legacySystemId\n      createdAt\n      modifiedAt\n      notes\n      financingType\n      requestEmail\n      requestPhone\n      requestFirstName\n      requestLastName\n      requestNewsletter\n      requestPostalCode\n      customer {\n        id\n        firstName\n        lastName\n        email\n      }\n      customerId\n      assignedAgent {\n        id\n        firstName\n        lastName\n        email\n      }\n      assignedAgentId\n      brand {\n        id\n        name\n        slug\n      }\n      brandId\n      model {\n        id\n        name\n        slug\n      }\n      modelId\n      leasingCompany {\n        id\n        name\n      }\n      leasingCompanyId\n      order\n      gclid\n      noteInternal\n      completedAt\n      nextCallAt\n      confirmedAt\n      relayedAt\n      feedbackAt\n      closedAt\n      waitingForOffer\n      offersSentAt\n      deliveryExpectedAt\n      carDelivered\n      displayOrder\n      cancellationReason\n      cancellationNote\n      status {\n        id\n        name\n        code\n        colorHex\n        isFinal\n      }\n      statusId\n      state {\n        id\n        name\n        code\n        colorHex\n      }\n      stateId\n    }\n  }\n": typeof types.GetAllCarRequestsDocument,
    "\n  query GetCarRequest($id: String!) {\n    carRequest(id: $id) {\n      id\n      isFromLegacySystem\n      legacySystemId\n      createdAt\n      modifiedAt\n      notes\n      financingType\n      requestEmail\n      requestPhone\n      requestFirstName\n      requestLastName\n      requestNewsletter\n      requestPostalCode\n      customer {\n        id\n        firstName\n        lastName\n        email\n      }\n      customerId\n      assignedAgent {\n        id\n        firstName\n        lastName\n        email\n      }\n      assignedAgentId\n      brand {\n        id\n        name\n        slug\n      }\n      brandId\n      model {\n        id\n        name\n        slug\n      }\n      modelId\n      leasingCompany {\n        id\n        name\n      }\n      leasingCompanyId\n      order\n      gclid\n      noteInternal\n      completedAt\n      nextCallAt\n      confirmedAt\n      relayedAt\n      feedbackAt\n      closedAt\n      waitingForOffer\n      offersSentAt\n      deliveryExpectedAt\n      carDelivered\n      displayOrder\n      cancellationReason\n      cancellationNote\n      status {\n        id\n        name\n        code\n        colorHex\n        isFinal\n      }\n      statusId\n      state {\n        id\n        name\n        code\n        colorHex\n      }\n      stateId\n      logs {\n        id\n        createdAt\n        message\n        actionType\n        metadata\n        carRequestId\n        author {\n          id\n          firstName\n          lastName\n          email\n        }\n        authorId\n        legacySystemId\n      }\n    }\n  }\n": typeof types.GetCarRequestDocument,
    "\n  mutation CreateCarRequest($input: CreateCarRequestInput!) {\n    createCarRequest(input: $input) {\n      id\n      createdAt\n      modifiedAt\n    }\n  }\n": typeof types.CreateCarRequestDocument,
    "\n  mutation UpdateCarRequest($id: String!, $input: UpdateCarRequestInput!) {\n    updateCarRequest(id: $id, input: $input) {\n      id\n      modifiedAt\n    }\n  }\n": typeof types.UpdateCarRequestDocument,
    "\n  mutation DeleteCarRequest($id: String!) {\n    deleteCarRequest(id: $id)\n  }\n": typeof types.DeleteCarRequestDocument,
    "\n  query GetAllCarRequestStates {\n    allCarRequestStates {\n      id\n      name\n      code\n      colorHex\n      createdAt\n      updatedAt\n    }\n  }\n": typeof types.GetAllCarRequestStatesDocument,
    "\n  query GetAllCarRequestStatuses {\n    allCarRequestStatuses {\n      id\n      name\n      code\n      colorHex\n      isFinal\n      displayOrder\n      columnDisplayOrder\n      createdAt\n      updatedAt\n    }\n  }\n": typeof types.GetAllCarRequestStatusesDocument,
    "\n  query GetCarRequestLogs($filter: CarRequestLogFilterInput!) {\n    carRequestLogs(filter: $filter) {\n      id\n      createdAt\n      message\n      actionType\n      metadata\n      carRequestId\n      author {\n        id\n        firstName\n        lastName\n        email\n      }\n      authorId\n      legacySystemId\n    }\n  }\n": typeof types.GetCarRequestLogsDocument,
    "\n  mutation CreateCarRequestLog($input: CreateCarRequestLogInput!) {\n    createCarRequestLog(input: $input) {\n      id\n      createdAt\n      message\n      actionType\n      metadata\n      carRequestId\n      author {\n        id\n        firstName\n        lastName\n        email\n      }\n      authorId\n      legacySystemId\n    }\n  }\n": typeof types.CreateCarRequestLogDocument,
    "\n  query GetAllOffers {\n    allOffers {\n      id\n      type\n      isPublic\n      isActive\n      totalPrice\n      description\n      slug\n      modelGeneration {\n        id\n        name\n      }\n      brand {\n        id\n        name\n      }\n      model {\n        id\n        name\n      }\n      leasingDurationMonths\n      monthlyPayment\n      annualMileageLimit\n      downPaymentLeasing\n      hasServiceIncluded\n      hasWinterTyresIncluded\n      hasAssistanceServiceIncluded\n      hasGapIncluded\n      discountAmount\n      discountPercentage\n      includesWarranty\n      warrantyYears\n      financingAvailable\n      createdAt\n      updatedAt\n    }\n  }\n": typeof types.GetAllOffersDocument,
    "\n  query GetUsers {\n    users(limit: 100) {\n      id\n      firstName\n      lastName\n      email\n      roles\n    }\n  }\n": typeof types.GetUsersDocument,
    "\n  query GetAllCatalogColors($limit: Float, $offset: Float, $type: CatalogColorType) {\n    catalogColors(limit: $limit, offset: $offset, type: $type) {\n      id\n      name\n      slug\n      color\n      type\n      legacySystemId\n      createdAt\n    }\n  }\n": typeof types.GetAllCatalogColorsDocument,
    "\n  query GetCatalogColor($id: String!) {\n    catalogColor(id: $id) {\n      id\n      name\n      slug\n      color\n      type\n      legacySystemId\n      createdAt\n    }\n  }\n": typeof types.GetCatalogColorDocument,
    "\n  mutation CreateCatalogColor($input: CreateCatalogColorInput!) {\n    createCatalogColor(input: $input) {\n      id\n      name\n      slug\n      color\n      type\n      legacySystemId\n      createdAt\n    }\n  }\n": typeof types.CreateCatalogColorDocument,
    "\n  mutation UpdateCatalogColor($id: String!, $input: UpdateCatalogColorInput!) {\n    updateCatalogColor(id: $id, input: $input) {\n      id\n      name\n      slug\n      color\n      type\n      legacySystemId\n      createdAt\n    }\n  }\n": typeof types.UpdateCatalogColorDocument,
    "\n  mutation DeleteCatalogColor($id: String!) {\n    deleteCatalogColor(id: $id)\n  }\n": typeof types.DeleteCatalogColorDocument,
    "\n  query GetCustomerDetail($id: String!) {\n    user(id: $id) {\n      id\n      email\n      firstName\n      lastName\n      phone\n      bio\n      roles\n      isActive\n      avatar {\n        id\n        url\n      }\n      createdAt\n      updatedAt\n    }\n  }\n": typeof types.GetCustomerDetailDocument,
    "\n  query GetOnboardingsWithDocuments($status: OnboardingStatus, $leasingCompanyId: String) {\n    allOnboardings(status: $status, leasingCompanyId: $leasingCompanyId) {\n      id\n      token\n      status\n      expiresAt\n      completedAt\n      createdAt\n      updatedAt\n      carRequest {\n        id\n        requestFirstName\n        requestLastName\n        requestEmail\n        customer {\n          id\n          firstName\n          lastName\n          email\n        }\n      }\n      leasingCompany {\n        id\n        name\n        logo {\n          id\n          url\n        }\n      }\n      documents {\n        id\n        uploadedAt\n        updatedAt\n        validationStatus\n        validationNote\n        validatedAt\n        file {\n          id\n          name\n          url\n          size\n          mimeType\n        }\n        documentTemplate {\n          id\n          name\n          fieldName\n        }\n        validatedBy {\n          id\n          firstName\n          lastName\n        }\n      }\n    }\n  }\n": typeof types.GetOnboardingsWithDocumentsDocument,
    "\n  query GetUserActivity($userId: String!, $limit: Float) {\n    userActivity(userId: $userId, limit: $limit) {\n      id\n      action\n      entityName\n      entityId\n      changes\n      userId\n      userEmail\n      ipAddress\n      userAgent\n      createdAt\n    }\n  }\n": typeof types.GetUserActivityDocument,
    "\n  query GetCarRequestsCount {\n    carRequestsCount\n  }\n": typeof types.GetCarRequestsCountDocument,
    "\n  query GetAllCustomers($limit: Float, $offset: Float) {\n    users(limit: $limit, offset: $offset) {\n      id\n      email\n      firstName\n      lastName\n      phone\n      roles\n      isActive\n      avatar {\n        id\n        url\n      }\n      createdAt\n      updatedAt\n    }\n  }\n": typeof types.GetAllCustomersDocument,
    "\n  query GetCustomer($id: String!) {\n    user(id: $id) {\n      id\n      email\n      firstName\n      lastName\n      phone\n      bio\n      roles\n      isActive\n      avatar {\n        id\n        url\n      }\n      createdAt\n      updatedAt\n    }\n  }\n": typeof types.GetCustomerDocument,
    "\n  query SearchCustomers($query: String!, $limit: Float) {\n    searchUsers(query: $query, limit: $limit) {\n      id\n      email\n      firstName\n      lastName\n      phone\n      roles\n      isActive\n      avatar {\n        id\n        url\n      }\n      createdAt\n      updatedAt\n    }\n  }\n": typeof types.SearchCustomersDocument,
    "\n  query GetAllDocumentTemplates($leasingCompanyId: String) {\n    allDocumentTemplates(leasingCompanyId: $leasingCompanyId) {\n      id\n      name\n      fieldName\n      description\n      helpText\n      isRequired\n      acceptedFormats\n      maxSizeBytes\n      displayOrder\n      isGlobal\n      createdAt\n      updatedAt\n      leasingCompany {\n        id\n        name\n      }\n    }\n  }\n": typeof types.GetAllDocumentTemplatesDocument,
    "\n  query GetDocumentTemplatesByLeasingCompany($leasingCompanyId: String!) {\n    documentTemplatesByLeasingCompany(leasingCompanyId: $leasingCompanyId) {\n      id\n      name\n      fieldName\n      description\n      helpText\n      isRequired\n      acceptedFormats\n      maxSizeBytes\n      displayOrder\n      createdAt\n      updatedAt\n    }\n  }\n": typeof types.GetDocumentTemplatesByLeasingCompanyDocument,
    "\n  query GetDocumentTemplate($id: String!) {\n    documentTemplate(id: $id) {\n      id\n      name\n      fieldName\n      description\n      helpText\n      isRequired\n      acceptedFormats\n      maxSizeBytes\n      displayOrder\n      isGlobal\n      createdAt\n      updatedAt\n      leasingCompany {\n        id\n        name\n      }\n    }\n  }\n": typeof types.GetDocumentTemplateDocument,
    "\n  mutation CreateDocumentTemplate($input: CreateDocumentTemplateInput!) {\n    createDocumentTemplate(input: $input) {\n      id\n      name\n      fieldName\n      description\n      helpText\n      isRequired\n      acceptedFormats\n      maxSizeBytes\n      displayOrder\n      createdAt\n    }\n  }\n": typeof types.CreateDocumentTemplateDocument,
    "\n  mutation UpdateDocumentTemplate($id: String!, $input: UpdateDocumentTemplateInput!) {\n    updateDocumentTemplate(id: $id, input: $input) {\n      id\n      name\n      fieldName\n      description\n      helpText\n      isRequired\n      acceptedFormats\n      maxSizeBytes\n      displayOrder\n      updatedAt\n    }\n  }\n": typeof types.UpdateDocumentTemplateDocument,
    "\n  mutation DeleteDocumentTemplate($id: String!) {\n    deleteDocumentTemplate(id: $id)\n  }\n": typeof types.DeleteDocumentTemplateDocument,
    "\n  mutation ReorderDocumentTemplates($ids: [String!]!) {\n    reorderDocumentTemplates(ids: $ids)\n  }\n": typeof types.ReorderDocumentTemplatesDocument,
    "\n  query GetAllEngines(\n    $limit: Float\n    $offset: Float\n    $generationId: String\n    $fuelType: CatalogEngineFuelType\n    $transmissionType: CatalogEngineTransmissionType\n    $driveType: CatalogEngineDriveType\n    $activeOnly: Boolean\n    $recommendedOnly: Boolean\n  ) {\n    allEngines(\n      limit: $limit\n      offset: $offset\n      generationId: $generationId\n      fuelType: $fuelType\n      transmissionType: $transmissionType\n      driveType: $driveType\n      activeOnly: $activeOnly\n      recommendedOnly: $recommendedOnly\n    ) {\n      id\n      name\n      generationId\n      generation {\n        id\n        name\n        slug\n        model {\n          id\n          name\n          slug\n          brand {\n            id\n            name\n            slug\n          }\n        }\n      }\n      fuelType\n      transmissionType\n      driveType\n      consumptionCombined\n      consumptionCity\n      consumptionOutOfCity\n      performance\n      torque\n      volume\n      emission\n      rangeKm\n      acceleration\n      fuelTankVolume\n      cylinderCount\n      maxSpeed\n      weight\n      gearsCount\n      productionStart\n      productionStop\n      active\n      recommended\n    }\n  }\n": typeof types.GetAllEnginesDocument,
    "\n  query GetEngine($id: String!) {\n    engine(id: $id) {\n      id\n      name\n      generationId\n      generation {\n        id\n        name\n        slug\n        model {\n          id\n          name\n          slug\n          brand {\n            id\n            name\n            slug\n          }\n        }\n      }\n      fuelType\n      transmissionType\n      driveType\n      consumptionCombined\n      consumptionCity\n      consumptionOutOfCity\n      performance\n      torque\n      volume\n      emission\n      rangeKm\n      acceleration\n      fuelTankVolume\n      cylinderCount\n      maxSpeed\n      weight\n      gearsCount\n      productionStart\n      productionStop\n      active\n      recommended\n    }\n  }\n": typeof types.GetEngineDocument,
    "\n  query GetEnginesByGeneration($generationId: String!) {\n    allEngines(generationId: $generationId, limit: 1000) {\n      id\n      name\n      fuelType\n      transmissionType\n      driveType\n      performance\n      torque\n      acceleration\n      active\n      recommended\n    }\n  }\n": typeof types.GetEnginesByGenerationDocument,
    "\n  query GetEnginesCount(\n    $generationId: String\n    $fuelType: CatalogEngineFuelType\n  ) {\n    enginesCount(generationId: $generationId, fuelType: $fuelType)\n  }\n": typeof types.GetEnginesCountDocument,
    "\n  query SearchEngines($query: String!, $limit: Float) {\n    searchEngines(query: $query, limit: $limit) {\n      id\n      name\n      generation {\n        id\n        name\n        model {\n          id\n          name\n          brand {\n            id\n            name\n          }\n        }\n      }\n      fuelType\n      transmissionType\n      driveType\n    }\n  }\n": typeof types.SearchEnginesDocument,
    "\n  mutation CreateEngine($input: CreateCatalogEngineInput!) {\n    createEngine(input: $input) {\n      id\n      name\n      generationId\n      generation {\n        id\n        name\n        slug\n      }\n      fuelType\n      transmissionType\n      driveType\n      consumptionCombined\n      consumptionCity\n      consumptionOutOfCity\n      performance\n      torque\n      volume\n      emission\n      rangeKm\n      acceleration\n      fuelTankVolume\n      cylinderCount\n      maxSpeed\n      weight\n      gearsCount\n      productionStart\n      productionStop\n      active\n      recommended\n    }\n  }\n": typeof types.CreateEngineDocument,
    "\n  mutation UpdateEngine($id: String!, $input: UpdateCatalogEngineInput!) {\n    updateEngine(id: $id, input: $input) {\n      id\n      name\n      generationId\n      generation {\n        id\n        name\n        slug\n      }\n      fuelType\n      transmissionType\n      driveType\n      consumptionCombined\n      consumptionCity\n      consumptionOutOfCity\n      performance\n      torque\n      volume\n      emission\n      rangeKm\n      acceleration\n      fuelTankVolume\n      cylinderCount\n      maxSpeed\n      weight\n      gearsCount\n      productionStart\n      productionStop\n      active\n      recommended\n    }\n  }\n": typeof types.UpdateEngineDocument,
    "\n  mutation DeleteEngine($id: String!) {\n    deleteEngine(id: $id)\n  }\n": typeof types.DeleteEngineDocument,
    "\n  query GetAllEquipmentItems($limit: Float, $offset: Float) {\n    allEquipmentItems(limit: $limit, offset: $offset) {\n      id\n      name\n      legacySystemId\n      createdAt\n      updatedAt\n    }\n  }\n": typeof types.GetAllEquipmentItemsDocument,
    "\n  query GetEquipmentItem($id: String!) {\n    equipmentItem(id: $id) {\n      id\n      name\n      legacySystemId\n      createdAt\n      updatedAt\n    }\n  }\n": typeof types.GetEquipmentItemDocument,
    "\n  query SearchEquipmentItems($query: String!, $limit: Float) {\n    searchEquipmentItems(query: $query, limit: $limit) {\n      id\n      name\n      legacySystemId\n    }\n  }\n": typeof types.SearchEquipmentItemsDocument,
    "\n  query GetEquipmentItemsCount {\n    equipmentItemsCount\n  }\n": typeof types.GetEquipmentItemsCountDocument,
    "\n  mutation CreateEquipmentItem($input: CreateCatalogBrandEquipmentItemInput!) {\n    createEquipmentItem(input: $input) {\n      id\n      name\n      legacySystemId\n      createdAt\n      updatedAt\n    }\n  }\n": typeof types.CreateEquipmentItemDocument,
    "\n  mutation UpdateEquipmentItem($id: String!, $input: UpdateCatalogBrandEquipmentItemInput!) {\n    updateEquipmentItem(id: $id, input: $input) {\n      id\n      name\n      legacySystemId\n      createdAt\n      updatedAt\n    }\n  }\n": typeof types.UpdateEquipmentItemDocument,
    "\n  mutation DeleteEquipmentItem($id: String!) {\n    deleteEquipmentItem(id: $id)\n  }\n": typeof types.DeleteEquipmentItemDocument,
    "\n  query GetAllCatalogModelGenerations($limit: Float, $offset: Float, $modelId: String, $isActive: Boolean) {\n    catalogModelGenerations(limit: $limit, offset: $offset, modelId: $modelId, isActive: $isActive) {\n      id\n      name\n      slug\n      legacySlug\n      description\n      productionStart\n      productionStop\n      wheelbase\n      frontTrack\n      rearTrack\n      length\n      width\n      height\n      trunkSpaceMin\n      trunkSpaceMax\n      bodyType\n      frontBrakesType\n      rearBrakesType\n      isActive\n      legacySystemId\n      modelId\n      model {\n        id\n        name\n        slug\n        brand {\n          id\n          name\n          slug\n        }\n      }\n      brandId\n      brand {\n        id\n        name\n        slug\n      }\n      createdAt\n    }\n  }\n": typeof types.GetAllCatalogModelGenerationsDocument,
    "\n  query GetCatalogModelGeneration($id: String!) {\n    catalogModelGeneration(id: $id) {\n      id\n      name\n      slug\n      legacySlug\n      description\n      productionStart\n      productionStop\n      wheelbase\n      frontTrack\n      rearTrack\n      length\n      width\n      height\n      trunkSpaceMin\n      trunkSpaceMax\n      bodyType\n      frontBrakesType\n      rearBrakesType\n      isActive\n      legacySystemId\n      modelId\n      model {\n        id\n        name\n        slug\n        brand {\n          id\n          name\n          slug\n        }\n      }\n      brandId\n      brand {\n        id\n        name\n        slug\n      }\n      createdAt\n    }\n  }\n": typeof types.GetCatalogModelGenerationDocument,
    "\n  mutation CreateCatalogModelGeneration($input: CreateCatalogModelGenerationInput!) {\n    createCatalogModelGeneration(input: $input) {\n      id\n      name\n      slug\n      legacySlug\n      description\n      productionStart\n      productionStop\n      wheelbase\n      frontTrack\n      rearTrack\n      length\n      width\n      height\n      trunkSpaceMin\n      trunkSpaceMax\n      bodyType\n      frontBrakesType\n      rearBrakesType\n      isActive\n      modelId\n      model {\n        id\n        name\n        slug\n      }\n      brandId\n      brand {\n        id\n        name\n        slug\n      }\n      createdAt\n    }\n  }\n": typeof types.CreateCatalogModelGenerationDocument,
    "\n  mutation UpdateCatalogModelGeneration($id: String!, $input: UpdateCatalogModelGenerationInput!) {\n    updateCatalogModelGeneration(id: $id, input: $input) {\n      id\n      name\n      slug\n      legacySlug\n      description\n      productionStart\n      productionStop\n      wheelbase\n      frontTrack\n      rearTrack\n      length\n      width\n      height\n      trunkSpaceMin\n      trunkSpaceMax\n      bodyType\n      frontBrakesType\n      rearBrakesType\n      isActive\n      modelId\n      model {\n        id\n        name\n        slug\n      }\n      brandId\n      brand {\n        id\n        name\n        slug\n      }\n      createdAt\n    }\n  }\n": typeof types.UpdateCatalogModelGenerationDocument,
    "\n  mutation DeleteCatalogModelGeneration($id: String!) {\n    deleteCatalogModelGeneration(id: $id)\n  }\n": typeof types.DeleteCatalogModelGenerationDocument,
    "\n  query CheckGenerationSlug($slug: String!) {\n    catalogModelGenerationBySlug(slug: $slug) {\n      id\n      slug\n    }\n  }\n": typeof types.CheckGenerationSlugDocument,
    "\n  query GetAllLeasingCompanies {\n    leasingCompanies {\n      id\n      name\n      link\n      logoId\n      logo {\n        id\n        url\n        alt\n      }\n      createdAt\n      updatedAt\n    }\n  }\n": typeof types.GetAllLeasingCompaniesDocument,
    "\n  query GetLeasingCompany($id: String!) {\n    leasingCompany(id: $id) {\n      id\n      name\n      link\n      logoId\n      logo {\n        id\n        url\n        alt\n      }\n      createdAt\n      updatedAt\n    }\n  }\n": typeof types.GetLeasingCompanyDocument,
    "\n  mutation CreateLeasingCompany($input: CreateLeasingCompanyInput!) {\n    createLeasingCompany(input: $input) {\n      id\n      name\n      link\n      logoId\n      createdAt\n      updatedAt\n    }\n  }\n": typeof types.CreateLeasingCompanyDocument,
    "\n  mutation UpdateLeasingCompany($id: String!, $input: UpdateLeasingCompanyInput!) {\n    updateLeasingCompany(id: $id, input: $input) {\n      id\n      name\n      link\n      logoId\n      logo {\n        id\n        url\n        alt\n      }\n      createdAt\n      updatedAt\n    }\n  }\n": typeof types.UpdateLeasingCompanyDocument,
    "\n  mutation DeleteLeasingCompany($id: String!) {\n    deleteLeasingCompany(id: $id)\n  }\n": typeof types.DeleteLeasingCompanyDocument,
    "\n  query CountLeasingCompanies {\n    leasingCompaniesCount\n  }\n": typeof types.CountLeasingCompaniesDocument,
    "\n  query GetAllCatalogModels($limit: Float, $offset: Float) {\n    allCatalogModels(limit: $limit, offset: $offset) {\n      id\n      name\n      slug\n      description\n      isActive\n      isHighlighted\n      isRecommended\n      legacySystemId\n      legacySlug\n      brandId\n      brand {\n        id\n        name\n        slug\n      }\n      createdAt\n      updatedAt\n    }\n  }\n": typeof types.GetAllCatalogModelsDocument,
    "\n  query GetCatalogModel($id: String!) {\n    catalogModel(id: $id) {\n      id\n      name\n      slug\n      description\n      isActive\n      isHighlighted\n      isRecommended\n      legacySystemId\n      legacySlug\n      brandId\n      brand {\n        id\n        name\n        slug\n      }\n      createdAt\n      updatedAt\n    }\n  }\n": typeof types.GetCatalogModelDocument,
    "\n  mutation CreateCatalogModel($input: CreateCatalogModelInput!) {\n    createCatalogModel(input: $input) {\n      id\n      name\n      slug\n      description\n      isActive\n      isHighlighted\n      isRecommended\n      legacySystemId\n      legacySlug\n      brandId\n      brand {\n        id\n        name\n        slug\n      }\n      createdAt\n      updatedAt\n    }\n  }\n": typeof types.CreateCatalogModelDocument,
    "\n  mutation UpdateCatalogModel($id: String!, $input: UpdateCatalogModelInput!) {\n    updateCatalogModel(id: $id, input: $input) {\n      id\n      name\n      slug\n      description\n      isActive\n      isHighlighted\n      isRecommended\n      brandId\n      brand {\n        id\n        name\n        slug\n      }\n      createdAt\n      updatedAt\n    }\n  }\n": typeof types.UpdateCatalogModelDocument,
    "\n  mutation DeleteCatalogModel($id: String!) {\n    deleteCatalogModel(id: $id)\n  }\n": typeof types.DeleteCatalogModelDocument,
    "\n  query GetCatalogModelsByBrand($brandId: String!, $limit: Float, $offset: Float) {\n    allCatalogModels(limit: $limit, offset: $offset) {\n      id\n      name\n      slug\n      brandId\n      brand {\n        id\n        name\n        slug\n      }\n    }\n  }\n": typeof types.GetCatalogModelsByBrandDocument,
    "\n  query CheckModelSlug($slug: String!) {\n    catalogModelBySlug(slug: $slug) {\n      id\n      slug\n    }\n  }\n": typeof types.CheckModelSlugDocument,
    "\n  query GetAllVehicleOffers($filters: OfferFiltersInput) {\n    allOffers(filters: $filters) {\n      __typename\n      id\n      type\n      isPublic\n      isActive\n      totalPrice\n      description\n      slug\n      modelGenerationId\n      brandId\n      modelId\n      createdAt\n      updatedAt\n\n      modelGeneration {\n        id\n        name\n      }\n\n      # Operational Leasing fields (will be null for other types)\n      leasingDurationMonths\n      monthlyPayment\n      annualMileageLimit\n      downPaymentLeasing\n      hasServiceIncluded\n      hasWinterTyresIncluded\n      hasAssistanceServiceIncluded\n      hasGapIncluded\n\n      # Direct Purchase fields (will be null for other types)\n      discountAmount\n      discountPercentage\n      includesWarranty\n      warrantyYears\n      financingAvailable\n\n      # Individual Offer fields (will be null for other types)\n      customerId\n      status\n      customRequirements\n      internalNotes\n      assignedToId\n      responseDeadline\n    }\n  }\n": typeof types.GetAllVehicleOffersDocument,
    "\n  query GetOffer($id: String!) {\n    offer(id: $id) {\n      __typename\n      id\n      type\n      isPublic\n      isActive\n      totalPrice\n      description\n      slug\n      modelGenerationId\n      brandId\n      modelId\n      createdAt\n      updatedAt\n\n      modelGeneration {\n        id\n        name\n      }\n\n      # All possible fields\n      leasingDurationMonths\n      monthlyPayment\n      annualMileageLimit\n      downPaymentLeasing\n      hasServiceIncluded\n      hasWinterTyresIncluded\n      hasAssistanceServiceIncluded\n      hasGapIncluded\n\n      discountAmount\n      discountPercentage\n      includesWarranty\n      warrantyYears\n      financingAvailable\n\n      customerId\n      status\n      customRequirements\n      internalNotes\n      assignedToId\n      responseDeadline\n    }\n  }\n": typeof types.GetOfferDocument,
    "\n  query GetIndividualOffers($filters: OfferFiltersInput) {\n    individualOffers(filters: $filters) {\n      __typename\n      id\n      type\n      isPublic\n      isActive\n      totalPrice\n      description\n      slug\n      modelGenerationId\n      brandId\n      modelId\n      createdAt\n      updatedAt\n\n      modelGeneration {\n        id\n        name\n      }\n\n      customerId\n      status\n      customRequirements\n      internalNotes\n      assignedToId\n      responseDeadline\n    }\n  }\n": typeof types.GetIndividualOffersDocument,
    "\n  mutation CreateOperationalLeasingOffer(\n    $input: CreateOperationalLeasingOfferInput!\n  ) {\n    createOperationalLeasingOffer(input: $input) {\n      __typename\n      id\n      type\n      isPublic\n      isActive\n      totalPrice\n      description\n      slug\n      modelGenerationId\n      brandId\n      modelId\n      createdAt\n      updatedAt\n\n      modelGeneration {\n        id\n        name\n      }\n\n      leasingDurationMonths\n      monthlyPayment\n      annualMileageLimit\n      downPaymentLeasing\n      hasServiceIncluded\n      hasWinterTyresIncluded\n      hasAssistanceServiceIncluded\n      hasGapIncluded\n    }\n  }\n": typeof types.CreateOperationalLeasingOfferDocument,
    "\n  mutation CreateDirectPurchaseOffer($input: CreateDirectPurchaseOfferInput!) {\n    createDirectPurchaseOffer(input: $input) {\n      __typename\n      id\n      type\n      isPublic\n      isActive\n      totalPrice\n      description\n      slug\n      modelGenerationId\n      brandId\n      modelId\n      createdAt\n      updatedAt\n\n      modelGeneration {\n        id\n        name\n      }\n\n      discountAmount\n      discountPercentage\n      includesWarranty\n      warrantyYears\n      financingAvailable\n    }\n  }\n": typeof types.CreateDirectPurchaseOfferDocument,
    "\n  mutation CreateIndividualOffer($input: CreateIndividualOfferInput!) {\n    createIndividualOffer(input: $input) {\n      __typename\n      id\n      type\n      isPublic\n      isActive\n      totalPrice\n      description\n      slug\n      modelGenerationId\n      brandId\n      modelId\n      createdAt\n      updatedAt\n\n      modelGeneration {\n        id\n        name\n      }\n\n      customerId\n      status\n      customRequirements\n      internalNotes\n      assignedToId\n      responseDeadline\n    }\n  }\n": typeof types.CreateIndividualOfferDocument,
    "\n  mutation UpdateOffer($id: String!, $input: UpdateOfferInput!) {\n    updateOffer(id: $id, input: $input) {\n      __typename\n      id\n      type\n      isPublic\n      isActive\n      totalPrice\n      description\n      slug\n      modelGenerationId\n      brandId\n      modelId\n      createdAt\n      updatedAt\n\n      modelGeneration {\n        id\n        name\n      }\n\n      # All possible fields\n      leasingDurationMonths\n      monthlyPayment\n      annualMileageLimit\n      downPaymentLeasing\n      hasServiceIncluded\n      hasWinterTyresIncluded\n      hasAssistanceServiceIncluded\n      hasGapIncluded\n\n      discountAmount\n      discountPercentage\n      includesWarranty\n      warrantyYears\n      financingAvailable\n\n      customerId\n      status\n      customRequirements\n      internalNotes\n      assignedToId\n      responseDeadline\n    }\n  }\n": typeof types.UpdateOfferDocument,
    "\n  mutation UpdateIndividualOfferStatus(\n    $id: String!\n    $status: IndividualOfferStatus!\n  ) {\n    updateIndividualOfferStatus(id: $id, status: $status) {\n      __typename\n      id\n      type\n      isPublic\n      isActive\n      totalPrice\n      description\n      slug\n      modelGenerationId\n      brandId\n      modelId\n      createdAt\n      updatedAt\n\n      modelGeneration {\n        id\n        name\n      }\n\n      customerId\n      status\n      customRequirements\n      internalNotes\n      assignedToId\n      responseDeadline\n    }\n  }\n": typeof types.UpdateIndividualOfferStatusDocument,
    "\n  mutation DeleteOffer($id: String!) {\n    deleteOffer(id: $id)\n  }\n": typeof types.DeleteOfferDocument,
    "\n  query GetAllOnboardings($status: OnboardingStatus, $leasingCompanyId: String) {\n    allOnboardings(status: $status, leasingCompanyId: $leasingCompanyId) {\n      id\n      token\n      status\n      expiresAt\n      completedAt\n      createdAt\n      updatedAt\n      carRequest {\n        id\n        requestFirstName\n        requestLastName\n        requestEmail\n        customer {\n          id\n          firstName\n          lastName\n          email\n        }\n      }\n      leasingCompany {\n        id\n        name\n        logo {\n          id\n          url\n        }\n      }\n      documents {\n        id\n        validationStatus\n      }\n    }\n  }\n": typeof types.GetAllOnboardingsDocument,
    "\n  query GetOnboarding($id: String!) {\n    onboarding(id: $id) {\n      id\n      token\n      status\n      expiresAt\n      completedAt\n      lastReminderSentAt\n      createdAt\n      updatedAt\n      carRequest {\n        id\n        requestFirstName\n        requestLastName\n        requestEmail\n        requestPhone\n        financingType\n        customer {\n          id\n          firstName\n          lastName\n          email\n          phone\n        }\n        brand {\n          id\n          name\n        }\n        model {\n          id\n          name\n        }\n      }\n      leasingCompany {\n        id\n        name\n        link\n        logo {\n          id\n          url\n        }\n      }\n      documents {\n        id\n        uploadedAt\n        updatedAt\n        validationStatus\n        validationNote\n        validatedAt\n        file {\n          id\n          name\n          url\n          relativePath\n          size\n          sizeFormatted\n          mimeType\n          extension\n        }\n        documentTemplate {\n          id\n          name\n          fieldName\n          description\n          helpText\n          isRequired\n          acceptedFormats\n          maxSizeBytes\n        }\n        validatedBy {\n          id\n          firstName\n          lastName\n          email\n        }\n      }\n    }\n  }\n": typeof types.GetOnboardingDocument,
    "\n  query GetRequiredDocumentsForOnboarding($onboardingId: String!) {\n    requiredDocumentsForOnboarding(onboardingId: $onboardingId) {\n      id\n      name\n      fieldName\n      description\n      helpText\n      isRequired\n      acceptedFormats\n      maxSizeBytes\n      displayOrder\n    }\n  }\n": typeof types.GetRequiredDocumentsForOnboardingDocument,
    "\n  mutation CreateOnboarding($carRequestId: String!, $expirationDays: Float) {\n    createOnboarding(carRequestId: $carRequestId, expirationDays: $expirationDays) {\n      id\n      token\n      status\n      expiresAt\n      createdAt\n    }\n  }\n": typeof types.CreateOnboardingDocument,
    "\n  mutation ValidateDocument($documentId: String!, $input: ValidateDocumentInput!) {\n    validateDocument(documentId: $documentId, input: $input) {\n      id\n      validationStatus\n      validationNote\n      validatedAt\n      validatedBy {\n        id\n        firstName\n        lastName\n      }\n    }\n  }\n": typeof types.ValidateDocumentDocument,
    "\n  mutation SendOnboardingReminder($onboardingId: String!) {\n    sendOnboardingReminder(onboardingId: $onboardingId)\n  }\n": typeof types.SendOnboardingReminderDocument,
    "\n  mutation UpdateOnboardingStatus($onboardingId: String!, $status: OnboardingStatus!) {\n    updateOnboardingStatus(onboardingId: $onboardingId, status: $status)\n  }\n": typeof types.UpdateOnboardingStatusDocument,
    "\n  query GetAllUsers($limit: Float, $offset: Float) {\n    users(limit: $limit, offset: $offset) {\n      id\n      email\n      firstName\n      lastName\n      roles\n      phone\n      bio\n      isActive\n      createdAt\n      updatedAt\n    }\n  }\n": typeof types.GetAllUsersDocument,
    "\n  query GetUser($id: String!) {\n    user(id: $id) {\n      id\n      email\n      firstName\n      lastName\n      roles\n      phone\n      bio\n      isActive\n      createdAt\n      updatedAt\n    }\n  }\n": typeof types.GetUserDocument,
    "\n  query SearchUsers($query: String!, $limit: Float) {\n    searchUsers(query: $query, limit: $limit) {\n      id\n      email\n      firstName\n      lastName\n      roles\n      isActive\n    }\n  }\n": typeof types.SearchUsersDocument,
    "\n  mutation CreateUser($input: CreateUserInput!) {\n    createUser(input: $input) {\n      id\n      email\n      firstName\n      lastName\n      roles\n      phone\n      bio\n      isActive\n      createdAt\n      updatedAt\n    }\n  }\n": typeof types.CreateUserDocument,
    "\n  mutation UpdateUser($id: String!, $input: UpdateUserInput!) {\n    updateUser(id: $id, input: $input) {\n      id\n      email\n      firstName\n      lastName\n      roles\n      phone\n      bio\n      isActive\n      createdAt\n      updatedAt\n    }\n  }\n": typeof types.UpdateUserDocument,
    "\n  mutation SoftDeleteUser($id: String!) {\n    softDeleteUser(id: $id) {\n      id\n      email\n      firstName\n      lastName\n      isActive\n    }\n  }\n": typeof types.SoftDeleteUserDocument,
    "\n  mutation DeleteUser($id: String!) {\n    deleteUser(id: $id)\n  }\n": typeof types.DeleteUserDocument,
    "\n  query GetUserAuditLogs($userId: String!, $limit: Float) {\n    userActivity(userId: $userId, limit: $limit) {\n      id\n      entityName\n      entityId\n      action\n      oldValue\n      newValue\n      changes\n      userId\n      userEmail\n      ipAddress\n      userAgent\n      metadata\n      createdAt\n    }\n  }\n": typeof types.GetUserAuditLogsDocument,
    "\n  mutation RefreshTokenInternal($input: RefreshTokenInput!) {\n    refreshToken(input: $input) {\n      accessToken\n      refreshToken\n      user {\n        id\n        email\n        firstName\n        lastName\n        roles\n      }\n    }\n  }\n": typeof types.RefreshTokenInternalDocument,
    "\n  mutation GenerateUploadUrl($filename: String!, $contentType: String!) {\n    generateUploadUrl(filename: $filename, contentType: $contentType)\n  }\n": typeof types.GenerateUploadUrlDocument,
    "\n  mutation CreateFile($input: CreateFileInput!) {\n    createFile(input: $input) {\n      id\n      relativePath\n      url\n      name\n      extension\n      size\n      mimeType\n      checksum\n      width\n      height\n      alt\n      title\n      thumbnailPath\n      isImage\n      createdAt\n      updatedAt\n    }\n  }\n": typeof types.CreateFileDocument,
    "\n  mutation DeleteFile($id: String!) {\n    deleteFile(id: $id)\n  }\n": typeof types.DeleteFileDocument,
    "\n  mutation DeleteFileCompletely($id: String!) {\n    deleteFileCompletely(id: $id)\n  }\n": typeof types.DeleteFileCompletelyDocument,
    "\n  query GetFileByChecksum($checksum: String!) {\n    fileByChecksum(checksum: $checksum) {\n      id\n      url\n      relativePath\n      name\n      extension\n      size\n      mimeType\n      checksum\n      width\n      height\n      isImage\n    }\n  }\n": typeof types.GetFileByChecksumDocument,
};
const documents: Documents = {
    "\n  mutation Login($input: LoginInput!) {\n    login(input: $input) {\n      accessToken\n      refreshToken\n      user {\n        id\n        email\n        firstName\n        lastName\n        roles\n        isActive\n      }\n    }\n  }\n": types.LoginDocument,
    "\n  mutation RefreshToken($input: RefreshTokenInput!) {\n    refreshToken(input: $input) {\n      accessToken\n      refreshToken\n      user {\n        id\n        email\n        firstName\n        lastName\n        roles\n        isActive\n      }\n    }\n  }\n": types.RefreshTokenDocument,
    "\n  mutation ImpersonateUser($input: ImpersonateInput!) {\n    impersonateUser(input: $input) {\n      accessToken\n      refreshToken\n      impersonatedUser {\n        id\n        email\n        firstName\n        lastName\n        roles\n        isActive\n      }\n      originalUser {\n        id\n        email\n        firstName\n        lastName\n        roles\n        isActive\n      }\n    }\n  }\n": types.ImpersonateUserDocument,
    "\n  mutation StopImpersonation {\n    stopImpersonation {\n      accessToken\n      refreshToken\n      user {\n        id\n        email\n        firstName\n        lastName\n        roles\n        isActive\n      }\n    }\n  }\n": types.StopImpersonationDocument,
    "\n  query GetAllBrandEquipments($limit: Float, $offset: Float, $brandId: String) {\n    allBrandEquipments(limit: $limit, offset: $offset, brandId: $brandId) {\n      id\n      name\n      description\n      brandId\n      brand {\n        id\n        name\n        slug\n      }\n      assignedItems {\n        id\n        name\n        legacySystemId\n      }\n      createdAt\n      updatedAt\n    }\n  }\n": types.GetAllBrandEquipmentsDocument,
    "\n  query GetBrandEquipment($id: String!) {\n    brandEquipment(id: $id) {\n      id\n      name\n      description\n      brandId\n      brand {\n        id\n        name\n        slug\n      }\n      assignedItems {\n        id\n        name\n        legacySystemId\n      }\n      createdAt\n      updatedAt\n    }\n  }\n": types.GetBrandEquipmentDocument,
    "\n  query SearchBrandEquipments($query: String!, $limit: Float) {\n    searchBrandEquipments(query: $query, limit: $limit) {\n      id\n      name\n      description\n      brandId\n      brand {\n        id\n        name\n        slug\n      }\n    }\n  }\n": types.SearchBrandEquipmentsDocument,
    "\n  query GetBrandEquipmentsCount($brandId: String) {\n    brandEquipmentsCount(brandId: $brandId)\n  }\n": types.GetBrandEquipmentsCountDocument,
    "\n  mutation CreateBrandEquipment($input: CreateCatalogBrandEquipmentInput!) {\n    createBrandEquipment(input: $input) {\n      id\n      name\n      description\n      brandId\n      brand {\n        id\n        name\n        slug\n      }\n      assignedItems {\n        id\n        name\n        legacySystemId\n      }\n      createdAt\n      updatedAt\n    }\n  }\n": types.CreateBrandEquipmentDocument,
    "\n  mutation UpdateBrandEquipment($id: String!, $input: UpdateCatalogBrandEquipmentInput!) {\n    updateBrandEquipment(id: $id, input: $input) {\n      id\n      name\n      description\n      brandId\n      brand {\n        id\n        name\n        slug\n      }\n      assignedItems {\n        id\n        name\n        legacySystemId\n      }\n      createdAt\n      updatedAt\n    }\n  }\n": types.UpdateBrandEquipmentDocument,
    "\n  mutation DeleteBrandEquipment($id: String!) {\n    deleteBrandEquipment(id: $id)\n  }\n": types.DeleteBrandEquipmentDocument,
    "\n  query GetAllCatalogBrands($limit: Float, $offset: Float) {\n    allCatalogBrands(limit: $limit, offset: $offset) {\n      id\n      name\n      slug\n      description\n      isActive\n      isHighlighted\n      isRecommended\n      logoId\n      logo {\n        id\n        url\n        alt\n      }\n      legacySystemId\n      legacySlug\n      createdAt\n      updatedAt\n    }\n  }\n": types.GetAllCatalogBrandsDocument,
    "\n  query GetCatalogBrand($id: String!) {\n    catalogBrand(id: $id) {\n      id\n      name\n      slug\n      description\n      isActive\n      isHighlighted\n      isRecommended\n      logoId\n      logo {\n        id\n        url\n        alt\n      }\n      legacySystemId\n      legacySlug\n      createdAt\n      updatedAt\n    }\n  }\n": types.GetCatalogBrandDocument,
    "\n  mutation CreateCatalogBrand($input: CreateCatalogBrandInput!) {\n    createCatalogBrand(input: $input) {\n      id\n      name\n      slug\n      description\n      isActive\n      isHighlighted\n      isRecommended\n      logoId\n      logo {\n        id\n        url\n        alt\n      }\n      legacySystemId\n      legacySlug\n      createdAt\n      updatedAt\n    }\n  }\n": types.CreateCatalogBrandDocument,
    "\n  mutation UpdateCatalogBrand($id: String!, $input: UpdateCatalogBrandInput!) {\n    updateCatalogBrand(id: $id, input: $input) {\n      id\n      name\n      slug\n      description\n      isActive\n      isHighlighted\n      isRecommended\n      logoId\n      logo {\n        id\n        url\n        alt\n      }\n      createdAt\n      updatedAt\n    }\n  }\n": types.UpdateCatalogBrandDocument,
    "\n  mutation DeleteCatalogBrand($id: String!) {\n    deleteCatalogBrand(id: $id)\n  }\n": types.DeleteCatalogBrandDocument,
    "\n  query CheckBrandSlug($slug: String!) {\n    checkBrandSlugAvailability(slug: $slug) {\n      id\n      slug\n    }\n  }\n": types.CheckBrandSlugDocument,
    "\n  query GetLeasingCompanies {\n    leasingCompanies {\n      id\n      name\n    }\n  }\n": types.GetLeasingCompaniesDocument,
    "\n  fragment CalculationItem on CarRequestCalculationItem {\n    id\n    itemType\n    name\n    description\n    priceImpact\n    isRequired\n    isIncluded\n    displayOrder\n    catalogColor {\n      id\n      name\n      color\n    }\n    createdAt\n  }\n": types.CalculationItemFragmentDoc,
    "\n  fragment CalculationOffer on CarRequestCalculationOffer {\n    id\n    status\n    monthlyPayment\n    downPayment\n    totalPrice\n    interestRate\n    adminFee\n    includesService\n    includesWinterTires\n    includesGap\n    includesAssistance\n    termsAndConditions\n    validUntil\n    notes\n    leasingCompany {\n      id\n      name\n      logo {\n        id\n        url\n      }\n    }\n    quotedBy {\n      id\n      firstName\n      lastName\n      email\n    }\n    quotedAt\n    createdAt\n    updatedAt\n  }\n": types.CalculationOfferFragmentDoc,
    "\n  fragment Calculation on CarRequestCalculation {\n    id\n    version\n    status\n    durationMonths\n    annualMileageKm\n    deliveryExpectedAt\n    notes\n    internalNotes\n    requestedBy {\n      id\n      firstName\n      lastName\n      email\n    }\n    assignedTo {\n      id\n      firstName\n      lastName\n      email\n    }\n    createdAt\n    updatedAt\n    submittedAt\n    completedAt\n  }\n": types.CalculationFragmentDoc,
    "\n  query GetCalculation($id: ID!) {\n    calculation(id: $id) {\n      ...Calculation\n      carRequest {\n        id\n        brand {\n          id\n          name\n        }\n        model {\n          id\n          name\n        }\n      }\n      offers {\n        ...CalculationOffer\n      }\n      items {\n        ...CalculationItem\n      }\n    }\n  }\n": types.GetCalculationDocument,
    "\n  query GetCalculationsByCarRequest($carRequestId: ID!) {\n    calculationsByCarRequest(carRequestId: $carRequestId) {\n      ...Calculation\n      offers {\n        id\n        status\n        leasingCompany {\n          id\n          name\n        }\n      }\n      items {\n        id\n        itemType\n        name\n      }\n    }\n  }\n": types.GetCalculationsByCarRequestDocument,
    "\n  query GetPendingCalculations {\n    pendingCalculations {\n      ...Calculation\n      carRequest {\n        id\n        brand {\n          id\n          name\n        }\n        model {\n          id\n          name\n        }\n        customer {\n          id\n          firstName\n          lastName\n          email\n        }\n      }\n      offers {\n        id\n        status\n        leasingCompany {\n          id\n          name\n        }\n      }\n    }\n  }\n": types.GetPendingCalculationsDocument,
    "\n  mutation CreateCalculation($input: CreateCalculationInput!) {\n    createCalculation(input: $input) {\n      ...Calculation\n    }\n  }\n": types.CreateCalculationDocument,
    "\n  mutation UpdateCalculation($id: ID!, $input: UpdateCalculationInput!) {\n    updateCalculation(id: $id, input: $input) {\n      ...Calculation\n    }\n  }\n": types.UpdateCalculationDocument,
    "\n  mutation SubmitCalculation($id: ID!) {\n    submitCalculation(id: $id) {\n      ...Calculation\n    }\n  }\n": types.SubmitCalculationDocument,
    "\n  mutation StartProcessingCalculation($id: ID!) {\n    startProcessingCalculation(id: $id) {\n      ...Calculation\n    }\n  }\n": types.StartProcessingCalculationDocument,
    "\n  mutation CompleteCalculation($id: ID!) {\n    completeCalculation(id: $id) {\n      ...Calculation\n    }\n  }\n": types.CompleteCalculationDocument,
    "\n  mutation AddOfferQuote($input: AddOfferQuoteInput!) {\n    addOfferQuote(input: $input) {\n      ...CalculationOffer\n    }\n  }\n": types.AddOfferQuoteDocument,
    "\n  mutation UpdateOfferQuote($offerId: ID!, $input: UpdateOfferQuoteInput!) {\n    updateOfferQuote(offerId: $offerId, input: $input) {\n      ...CalculationOffer\n    }\n  }\n": types.UpdateOfferQuoteDocument,
    "\n  mutation DeleteCalculation($id: ID!) {\n    deleteCalculation(id: $id)\n  }\n": types.DeleteCalculationDocument,
    "\n  query CarRequestsDashboardStats {\n    carRequestsDashboardStats {\n      overview {\n        activeCarRequests\n        totalVehicles\n        awaitingAction\n        completedOnboardingsThisMonth\n        activeCarRequestsChange\n        totalVehiclesChange\n      }\n      topBrands {\n        brandId\n        brandName\n        calculationsCount\n        percentage\n      }\n      agentPerformance {\n        agentId\n        agentName\n        carRequestsCount\n        vehiclesCount\n        conversionRate\n        averageProcessingDays\n      }\n      leasingCompanies {\n        leasingCompanyId\n        leasingCompanyName\n        calculationsCount\n        completedOnboardingsCount\n        conversionRate\n      }\n      timeline {\n        date\n        newCarRequests\n        completedOnboardings\n      }\n      funnel {\n        created\n        hasOffers\n        leasingCompanySelected\n        onboardingComplete\n        ordered\n      }\n    }\n  }\n": types.CarRequestsDashboardStatsDocument,
    "\n  query GetAllCarRequests($limit: Float, $offset: Float) {\n    allCarRequests(limit: $limit, offset: $offset) {\n      id\n      isFromLegacySystem\n      legacySystemId\n      createdAt\n      modifiedAt\n      notes\n      financingType\n      requestEmail\n      requestPhone\n      requestFirstName\n      requestLastName\n      requestNewsletter\n      requestPostalCode\n      customer {\n        id\n        firstName\n        lastName\n        email\n      }\n      customerId\n      assignedAgent {\n        id\n        firstName\n        lastName\n        email\n      }\n      assignedAgentId\n      brand {\n        id\n        name\n        slug\n      }\n      brandId\n      model {\n        id\n        name\n        slug\n      }\n      modelId\n      leasingCompany {\n        id\n        name\n      }\n      leasingCompanyId\n      order\n      gclid\n      noteInternal\n      completedAt\n      nextCallAt\n      confirmedAt\n      relayedAt\n      feedbackAt\n      closedAt\n      waitingForOffer\n      offersSentAt\n      deliveryExpectedAt\n      carDelivered\n      displayOrder\n      cancellationReason\n      cancellationNote\n      status {\n        id\n        name\n        code\n        colorHex\n        isFinal\n      }\n      statusId\n      state {\n        id\n        name\n        code\n        colorHex\n      }\n      stateId\n    }\n  }\n": types.GetAllCarRequestsDocument,
    "\n  query GetCarRequest($id: String!) {\n    carRequest(id: $id) {\n      id\n      isFromLegacySystem\n      legacySystemId\n      createdAt\n      modifiedAt\n      notes\n      financingType\n      requestEmail\n      requestPhone\n      requestFirstName\n      requestLastName\n      requestNewsletter\n      requestPostalCode\n      customer {\n        id\n        firstName\n        lastName\n        email\n      }\n      customerId\n      assignedAgent {\n        id\n        firstName\n        lastName\n        email\n      }\n      assignedAgentId\n      brand {\n        id\n        name\n        slug\n      }\n      brandId\n      model {\n        id\n        name\n        slug\n      }\n      modelId\n      leasingCompany {\n        id\n        name\n      }\n      leasingCompanyId\n      order\n      gclid\n      noteInternal\n      completedAt\n      nextCallAt\n      confirmedAt\n      relayedAt\n      feedbackAt\n      closedAt\n      waitingForOffer\n      offersSentAt\n      deliveryExpectedAt\n      carDelivered\n      displayOrder\n      cancellationReason\n      cancellationNote\n      status {\n        id\n        name\n        code\n        colorHex\n        isFinal\n      }\n      statusId\n      state {\n        id\n        name\n        code\n        colorHex\n      }\n      stateId\n      logs {\n        id\n        createdAt\n        message\n        actionType\n        metadata\n        carRequestId\n        author {\n          id\n          firstName\n          lastName\n          email\n        }\n        authorId\n        legacySystemId\n      }\n    }\n  }\n": types.GetCarRequestDocument,
    "\n  mutation CreateCarRequest($input: CreateCarRequestInput!) {\n    createCarRequest(input: $input) {\n      id\n      createdAt\n      modifiedAt\n    }\n  }\n": types.CreateCarRequestDocument,
    "\n  mutation UpdateCarRequest($id: String!, $input: UpdateCarRequestInput!) {\n    updateCarRequest(id: $id, input: $input) {\n      id\n      modifiedAt\n    }\n  }\n": types.UpdateCarRequestDocument,
    "\n  mutation DeleteCarRequest($id: String!) {\n    deleteCarRequest(id: $id)\n  }\n": types.DeleteCarRequestDocument,
    "\n  query GetAllCarRequestStates {\n    allCarRequestStates {\n      id\n      name\n      code\n      colorHex\n      createdAt\n      updatedAt\n    }\n  }\n": types.GetAllCarRequestStatesDocument,
    "\n  query GetAllCarRequestStatuses {\n    allCarRequestStatuses {\n      id\n      name\n      code\n      colorHex\n      isFinal\n      displayOrder\n      columnDisplayOrder\n      createdAt\n      updatedAt\n    }\n  }\n": types.GetAllCarRequestStatusesDocument,
    "\n  query GetCarRequestLogs($filter: CarRequestLogFilterInput!) {\n    carRequestLogs(filter: $filter) {\n      id\n      createdAt\n      message\n      actionType\n      metadata\n      carRequestId\n      author {\n        id\n        firstName\n        lastName\n        email\n      }\n      authorId\n      legacySystemId\n    }\n  }\n": types.GetCarRequestLogsDocument,
    "\n  mutation CreateCarRequestLog($input: CreateCarRequestLogInput!) {\n    createCarRequestLog(input: $input) {\n      id\n      createdAt\n      message\n      actionType\n      metadata\n      carRequestId\n      author {\n        id\n        firstName\n        lastName\n        email\n      }\n      authorId\n      legacySystemId\n    }\n  }\n": types.CreateCarRequestLogDocument,
    "\n  query GetAllOffers {\n    allOffers {\n      id\n      type\n      isPublic\n      isActive\n      totalPrice\n      description\n      slug\n      modelGeneration {\n        id\n        name\n      }\n      brand {\n        id\n        name\n      }\n      model {\n        id\n        name\n      }\n      leasingDurationMonths\n      monthlyPayment\n      annualMileageLimit\n      downPaymentLeasing\n      hasServiceIncluded\n      hasWinterTyresIncluded\n      hasAssistanceServiceIncluded\n      hasGapIncluded\n      discountAmount\n      discountPercentage\n      includesWarranty\n      warrantyYears\n      financingAvailable\n      createdAt\n      updatedAt\n    }\n  }\n": types.GetAllOffersDocument,
    "\n  query GetUsers {\n    users(limit: 100) {\n      id\n      firstName\n      lastName\n      email\n      roles\n    }\n  }\n": types.GetUsersDocument,
    "\n  query GetAllCatalogColors($limit: Float, $offset: Float, $type: CatalogColorType) {\n    catalogColors(limit: $limit, offset: $offset, type: $type) {\n      id\n      name\n      slug\n      color\n      type\n      legacySystemId\n      createdAt\n    }\n  }\n": types.GetAllCatalogColorsDocument,
    "\n  query GetCatalogColor($id: String!) {\n    catalogColor(id: $id) {\n      id\n      name\n      slug\n      color\n      type\n      legacySystemId\n      createdAt\n    }\n  }\n": types.GetCatalogColorDocument,
    "\n  mutation CreateCatalogColor($input: CreateCatalogColorInput!) {\n    createCatalogColor(input: $input) {\n      id\n      name\n      slug\n      color\n      type\n      legacySystemId\n      createdAt\n    }\n  }\n": types.CreateCatalogColorDocument,
    "\n  mutation UpdateCatalogColor($id: String!, $input: UpdateCatalogColorInput!) {\n    updateCatalogColor(id: $id, input: $input) {\n      id\n      name\n      slug\n      color\n      type\n      legacySystemId\n      createdAt\n    }\n  }\n": types.UpdateCatalogColorDocument,
    "\n  mutation DeleteCatalogColor($id: String!) {\n    deleteCatalogColor(id: $id)\n  }\n": types.DeleteCatalogColorDocument,
    "\n  query GetCustomerDetail($id: String!) {\n    user(id: $id) {\n      id\n      email\n      firstName\n      lastName\n      phone\n      bio\n      roles\n      isActive\n      avatar {\n        id\n        url\n      }\n      createdAt\n      updatedAt\n    }\n  }\n": types.GetCustomerDetailDocument,
    "\n  query GetOnboardingsWithDocuments($status: OnboardingStatus, $leasingCompanyId: String) {\n    allOnboardings(status: $status, leasingCompanyId: $leasingCompanyId) {\n      id\n      token\n      status\n      expiresAt\n      completedAt\n      createdAt\n      updatedAt\n      carRequest {\n        id\n        requestFirstName\n        requestLastName\n        requestEmail\n        customer {\n          id\n          firstName\n          lastName\n          email\n        }\n      }\n      leasingCompany {\n        id\n        name\n        logo {\n          id\n          url\n        }\n      }\n      documents {\n        id\n        uploadedAt\n        updatedAt\n        validationStatus\n        validationNote\n        validatedAt\n        file {\n          id\n          name\n          url\n          size\n          mimeType\n        }\n        documentTemplate {\n          id\n          name\n          fieldName\n        }\n        validatedBy {\n          id\n          firstName\n          lastName\n        }\n      }\n    }\n  }\n": types.GetOnboardingsWithDocumentsDocument,
    "\n  query GetUserActivity($userId: String!, $limit: Float) {\n    userActivity(userId: $userId, limit: $limit) {\n      id\n      action\n      entityName\n      entityId\n      changes\n      userId\n      userEmail\n      ipAddress\n      userAgent\n      createdAt\n    }\n  }\n": types.GetUserActivityDocument,
    "\n  query GetCarRequestsCount {\n    carRequestsCount\n  }\n": types.GetCarRequestsCountDocument,
    "\n  query GetAllCustomers($limit: Float, $offset: Float) {\n    users(limit: $limit, offset: $offset) {\n      id\n      email\n      firstName\n      lastName\n      phone\n      roles\n      isActive\n      avatar {\n        id\n        url\n      }\n      createdAt\n      updatedAt\n    }\n  }\n": types.GetAllCustomersDocument,
    "\n  query GetCustomer($id: String!) {\n    user(id: $id) {\n      id\n      email\n      firstName\n      lastName\n      phone\n      bio\n      roles\n      isActive\n      avatar {\n        id\n        url\n      }\n      createdAt\n      updatedAt\n    }\n  }\n": types.GetCustomerDocument,
    "\n  query SearchCustomers($query: String!, $limit: Float) {\n    searchUsers(query: $query, limit: $limit) {\n      id\n      email\n      firstName\n      lastName\n      phone\n      roles\n      isActive\n      avatar {\n        id\n        url\n      }\n      createdAt\n      updatedAt\n    }\n  }\n": types.SearchCustomersDocument,
    "\n  query GetAllDocumentTemplates($leasingCompanyId: String) {\n    allDocumentTemplates(leasingCompanyId: $leasingCompanyId) {\n      id\n      name\n      fieldName\n      description\n      helpText\n      isRequired\n      acceptedFormats\n      maxSizeBytes\n      displayOrder\n      isGlobal\n      createdAt\n      updatedAt\n      leasingCompany {\n        id\n        name\n      }\n    }\n  }\n": types.GetAllDocumentTemplatesDocument,
    "\n  query GetDocumentTemplatesByLeasingCompany($leasingCompanyId: String!) {\n    documentTemplatesByLeasingCompany(leasingCompanyId: $leasingCompanyId) {\n      id\n      name\n      fieldName\n      description\n      helpText\n      isRequired\n      acceptedFormats\n      maxSizeBytes\n      displayOrder\n      createdAt\n      updatedAt\n    }\n  }\n": types.GetDocumentTemplatesByLeasingCompanyDocument,
    "\n  query GetDocumentTemplate($id: String!) {\n    documentTemplate(id: $id) {\n      id\n      name\n      fieldName\n      description\n      helpText\n      isRequired\n      acceptedFormats\n      maxSizeBytes\n      displayOrder\n      isGlobal\n      createdAt\n      updatedAt\n      leasingCompany {\n        id\n        name\n      }\n    }\n  }\n": types.GetDocumentTemplateDocument,
    "\n  mutation CreateDocumentTemplate($input: CreateDocumentTemplateInput!) {\n    createDocumentTemplate(input: $input) {\n      id\n      name\n      fieldName\n      description\n      helpText\n      isRequired\n      acceptedFormats\n      maxSizeBytes\n      displayOrder\n      createdAt\n    }\n  }\n": types.CreateDocumentTemplateDocument,
    "\n  mutation UpdateDocumentTemplate($id: String!, $input: UpdateDocumentTemplateInput!) {\n    updateDocumentTemplate(id: $id, input: $input) {\n      id\n      name\n      fieldName\n      description\n      helpText\n      isRequired\n      acceptedFormats\n      maxSizeBytes\n      displayOrder\n      updatedAt\n    }\n  }\n": types.UpdateDocumentTemplateDocument,
    "\n  mutation DeleteDocumentTemplate($id: String!) {\n    deleteDocumentTemplate(id: $id)\n  }\n": types.DeleteDocumentTemplateDocument,
    "\n  mutation ReorderDocumentTemplates($ids: [String!]!) {\n    reorderDocumentTemplates(ids: $ids)\n  }\n": types.ReorderDocumentTemplatesDocument,
    "\n  query GetAllEngines(\n    $limit: Float\n    $offset: Float\n    $generationId: String\n    $fuelType: CatalogEngineFuelType\n    $transmissionType: CatalogEngineTransmissionType\n    $driveType: CatalogEngineDriveType\n    $activeOnly: Boolean\n    $recommendedOnly: Boolean\n  ) {\n    allEngines(\n      limit: $limit\n      offset: $offset\n      generationId: $generationId\n      fuelType: $fuelType\n      transmissionType: $transmissionType\n      driveType: $driveType\n      activeOnly: $activeOnly\n      recommendedOnly: $recommendedOnly\n    ) {\n      id\n      name\n      generationId\n      generation {\n        id\n        name\n        slug\n        model {\n          id\n          name\n          slug\n          brand {\n            id\n            name\n            slug\n          }\n        }\n      }\n      fuelType\n      transmissionType\n      driveType\n      consumptionCombined\n      consumptionCity\n      consumptionOutOfCity\n      performance\n      torque\n      volume\n      emission\n      rangeKm\n      acceleration\n      fuelTankVolume\n      cylinderCount\n      maxSpeed\n      weight\n      gearsCount\n      productionStart\n      productionStop\n      active\n      recommended\n    }\n  }\n": types.GetAllEnginesDocument,
    "\n  query GetEngine($id: String!) {\n    engine(id: $id) {\n      id\n      name\n      generationId\n      generation {\n        id\n        name\n        slug\n        model {\n          id\n          name\n          slug\n          brand {\n            id\n            name\n            slug\n          }\n        }\n      }\n      fuelType\n      transmissionType\n      driveType\n      consumptionCombined\n      consumptionCity\n      consumptionOutOfCity\n      performance\n      torque\n      volume\n      emission\n      rangeKm\n      acceleration\n      fuelTankVolume\n      cylinderCount\n      maxSpeed\n      weight\n      gearsCount\n      productionStart\n      productionStop\n      active\n      recommended\n    }\n  }\n": types.GetEngineDocument,
    "\n  query GetEnginesByGeneration($generationId: String!) {\n    allEngines(generationId: $generationId, limit: 1000) {\n      id\n      name\n      fuelType\n      transmissionType\n      driveType\n      performance\n      torque\n      acceleration\n      active\n      recommended\n    }\n  }\n": types.GetEnginesByGenerationDocument,
    "\n  query GetEnginesCount(\n    $generationId: String\n    $fuelType: CatalogEngineFuelType\n  ) {\n    enginesCount(generationId: $generationId, fuelType: $fuelType)\n  }\n": types.GetEnginesCountDocument,
    "\n  query SearchEngines($query: String!, $limit: Float) {\n    searchEngines(query: $query, limit: $limit) {\n      id\n      name\n      generation {\n        id\n        name\n        model {\n          id\n          name\n          brand {\n            id\n            name\n          }\n        }\n      }\n      fuelType\n      transmissionType\n      driveType\n    }\n  }\n": types.SearchEnginesDocument,
    "\n  mutation CreateEngine($input: CreateCatalogEngineInput!) {\n    createEngine(input: $input) {\n      id\n      name\n      generationId\n      generation {\n        id\n        name\n        slug\n      }\n      fuelType\n      transmissionType\n      driveType\n      consumptionCombined\n      consumptionCity\n      consumptionOutOfCity\n      performance\n      torque\n      volume\n      emission\n      rangeKm\n      acceleration\n      fuelTankVolume\n      cylinderCount\n      maxSpeed\n      weight\n      gearsCount\n      productionStart\n      productionStop\n      active\n      recommended\n    }\n  }\n": types.CreateEngineDocument,
    "\n  mutation UpdateEngine($id: String!, $input: UpdateCatalogEngineInput!) {\n    updateEngine(id: $id, input: $input) {\n      id\n      name\n      generationId\n      generation {\n        id\n        name\n        slug\n      }\n      fuelType\n      transmissionType\n      driveType\n      consumptionCombined\n      consumptionCity\n      consumptionOutOfCity\n      performance\n      torque\n      volume\n      emission\n      rangeKm\n      acceleration\n      fuelTankVolume\n      cylinderCount\n      maxSpeed\n      weight\n      gearsCount\n      productionStart\n      productionStop\n      active\n      recommended\n    }\n  }\n": types.UpdateEngineDocument,
    "\n  mutation DeleteEngine($id: String!) {\n    deleteEngine(id: $id)\n  }\n": types.DeleteEngineDocument,
    "\n  query GetAllEquipmentItems($limit: Float, $offset: Float) {\n    allEquipmentItems(limit: $limit, offset: $offset) {\n      id\n      name\n      legacySystemId\n      createdAt\n      updatedAt\n    }\n  }\n": types.GetAllEquipmentItemsDocument,
    "\n  query GetEquipmentItem($id: String!) {\n    equipmentItem(id: $id) {\n      id\n      name\n      legacySystemId\n      createdAt\n      updatedAt\n    }\n  }\n": types.GetEquipmentItemDocument,
    "\n  query SearchEquipmentItems($query: String!, $limit: Float) {\n    searchEquipmentItems(query: $query, limit: $limit) {\n      id\n      name\n      legacySystemId\n    }\n  }\n": types.SearchEquipmentItemsDocument,
    "\n  query GetEquipmentItemsCount {\n    equipmentItemsCount\n  }\n": types.GetEquipmentItemsCountDocument,
    "\n  mutation CreateEquipmentItem($input: CreateCatalogBrandEquipmentItemInput!) {\n    createEquipmentItem(input: $input) {\n      id\n      name\n      legacySystemId\n      createdAt\n      updatedAt\n    }\n  }\n": types.CreateEquipmentItemDocument,
    "\n  mutation UpdateEquipmentItem($id: String!, $input: UpdateCatalogBrandEquipmentItemInput!) {\n    updateEquipmentItem(id: $id, input: $input) {\n      id\n      name\n      legacySystemId\n      createdAt\n      updatedAt\n    }\n  }\n": types.UpdateEquipmentItemDocument,
    "\n  mutation DeleteEquipmentItem($id: String!) {\n    deleteEquipmentItem(id: $id)\n  }\n": types.DeleteEquipmentItemDocument,
    "\n  query GetAllCatalogModelGenerations($limit: Float, $offset: Float, $modelId: String, $isActive: Boolean) {\n    catalogModelGenerations(limit: $limit, offset: $offset, modelId: $modelId, isActive: $isActive) {\n      id\n      name\n      slug\n      legacySlug\n      description\n      productionStart\n      productionStop\n      wheelbase\n      frontTrack\n      rearTrack\n      length\n      width\n      height\n      trunkSpaceMin\n      trunkSpaceMax\n      bodyType\n      frontBrakesType\n      rearBrakesType\n      isActive\n      legacySystemId\n      modelId\n      model {\n        id\n        name\n        slug\n        brand {\n          id\n          name\n          slug\n        }\n      }\n      brandId\n      brand {\n        id\n        name\n        slug\n      }\n      createdAt\n    }\n  }\n": types.GetAllCatalogModelGenerationsDocument,
    "\n  query GetCatalogModelGeneration($id: String!) {\n    catalogModelGeneration(id: $id) {\n      id\n      name\n      slug\n      legacySlug\n      description\n      productionStart\n      productionStop\n      wheelbase\n      frontTrack\n      rearTrack\n      length\n      width\n      height\n      trunkSpaceMin\n      trunkSpaceMax\n      bodyType\n      frontBrakesType\n      rearBrakesType\n      isActive\n      legacySystemId\n      modelId\n      model {\n        id\n        name\n        slug\n        brand {\n          id\n          name\n          slug\n        }\n      }\n      brandId\n      brand {\n        id\n        name\n        slug\n      }\n      createdAt\n    }\n  }\n": types.GetCatalogModelGenerationDocument,
    "\n  mutation CreateCatalogModelGeneration($input: CreateCatalogModelGenerationInput!) {\n    createCatalogModelGeneration(input: $input) {\n      id\n      name\n      slug\n      legacySlug\n      description\n      productionStart\n      productionStop\n      wheelbase\n      frontTrack\n      rearTrack\n      length\n      width\n      height\n      trunkSpaceMin\n      trunkSpaceMax\n      bodyType\n      frontBrakesType\n      rearBrakesType\n      isActive\n      modelId\n      model {\n        id\n        name\n        slug\n      }\n      brandId\n      brand {\n        id\n        name\n        slug\n      }\n      createdAt\n    }\n  }\n": types.CreateCatalogModelGenerationDocument,
    "\n  mutation UpdateCatalogModelGeneration($id: String!, $input: UpdateCatalogModelGenerationInput!) {\n    updateCatalogModelGeneration(id: $id, input: $input) {\n      id\n      name\n      slug\n      legacySlug\n      description\n      productionStart\n      productionStop\n      wheelbase\n      frontTrack\n      rearTrack\n      length\n      width\n      height\n      trunkSpaceMin\n      trunkSpaceMax\n      bodyType\n      frontBrakesType\n      rearBrakesType\n      isActive\n      modelId\n      model {\n        id\n        name\n        slug\n      }\n      brandId\n      brand {\n        id\n        name\n        slug\n      }\n      createdAt\n    }\n  }\n": types.UpdateCatalogModelGenerationDocument,
    "\n  mutation DeleteCatalogModelGeneration($id: String!) {\n    deleteCatalogModelGeneration(id: $id)\n  }\n": types.DeleteCatalogModelGenerationDocument,
    "\n  query CheckGenerationSlug($slug: String!) {\n    catalogModelGenerationBySlug(slug: $slug) {\n      id\n      slug\n    }\n  }\n": types.CheckGenerationSlugDocument,
    "\n  query GetAllLeasingCompanies {\n    leasingCompanies {\n      id\n      name\n      link\n      logoId\n      logo {\n        id\n        url\n        alt\n      }\n      createdAt\n      updatedAt\n    }\n  }\n": types.GetAllLeasingCompaniesDocument,
    "\n  query GetLeasingCompany($id: String!) {\n    leasingCompany(id: $id) {\n      id\n      name\n      link\n      logoId\n      logo {\n        id\n        url\n        alt\n      }\n      createdAt\n      updatedAt\n    }\n  }\n": types.GetLeasingCompanyDocument,
    "\n  mutation CreateLeasingCompany($input: CreateLeasingCompanyInput!) {\n    createLeasingCompany(input: $input) {\n      id\n      name\n      link\n      logoId\n      createdAt\n      updatedAt\n    }\n  }\n": types.CreateLeasingCompanyDocument,
    "\n  mutation UpdateLeasingCompany($id: String!, $input: UpdateLeasingCompanyInput!) {\n    updateLeasingCompany(id: $id, input: $input) {\n      id\n      name\n      link\n      logoId\n      logo {\n        id\n        url\n        alt\n      }\n      createdAt\n      updatedAt\n    }\n  }\n": types.UpdateLeasingCompanyDocument,
    "\n  mutation DeleteLeasingCompany($id: String!) {\n    deleteLeasingCompany(id: $id)\n  }\n": types.DeleteLeasingCompanyDocument,
    "\n  query CountLeasingCompanies {\n    leasingCompaniesCount\n  }\n": types.CountLeasingCompaniesDocument,
    "\n  query GetAllCatalogModels($limit: Float, $offset: Float) {\n    allCatalogModels(limit: $limit, offset: $offset) {\n      id\n      name\n      slug\n      description\n      isActive\n      isHighlighted\n      isRecommended\n      legacySystemId\n      legacySlug\n      brandId\n      brand {\n        id\n        name\n        slug\n      }\n      createdAt\n      updatedAt\n    }\n  }\n": types.GetAllCatalogModelsDocument,
    "\n  query GetCatalogModel($id: String!) {\n    catalogModel(id: $id) {\n      id\n      name\n      slug\n      description\n      isActive\n      isHighlighted\n      isRecommended\n      legacySystemId\n      legacySlug\n      brandId\n      brand {\n        id\n        name\n        slug\n      }\n      createdAt\n      updatedAt\n    }\n  }\n": types.GetCatalogModelDocument,
    "\n  mutation CreateCatalogModel($input: CreateCatalogModelInput!) {\n    createCatalogModel(input: $input) {\n      id\n      name\n      slug\n      description\n      isActive\n      isHighlighted\n      isRecommended\n      legacySystemId\n      legacySlug\n      brandId\n      brand {\n        id\n        name\n        slug\n      }\n      createdAt\n      updatedAt\n    }\n  }\n": types.CreateCatalogModelDocument,
    "\n  mutation UpdateCatalogModel($id: String!, $input: UpdateCatalogModelInput!) {\n    updateCatalogModel(id: $id, input: $input) {\n      id\n      name\n      slug\n      description\n      isActive\n      isHighlighted\n      isRecommended\n      brandId\n      brand {\n        id\n        name\n        slug\n      }\n      createdAt\n      updatedAt\n    }\n  }\n": types.UpdateCatalogModelDocument,
    "\n  mutation DeleteCatalogModel($id: String!) {\n    deleteCatalogModel(id: $id)\n  }\n": types.DeleteCatalogModelDocument,
    "\n  query GetCatalogModelsByBrand($brandId: String!, $limit: Float, $offset: Float) {\n    allCatalogModels(limit: $limit, offset: $offset) {\n      id\n      name\n      slug\n      brandId\n      brand {\n        id\n        name\n        slug\n      }\n    }\n  }\n": types.GetCatalogModelsByBrandDocument,
    "\n  query CheckModelSlug($slug: String!) {\n    catalogModelBySlug(slug: $slug) {\n      id\n      slug\n    }\n  }\n": types.CheckModelSlugDocument,
    "\n  query GetAllVehicleOffers($filters: OfferFiltersInput) {\n    allOffers(filters: $filters) {\n      __typename\n      id\n      type\n      isPublic\n      isActive\n      totalPrice\n      description\n      slug\n      modelGenerationId\n      brandId\n      modelId\n      createdAt\n      updatedAt\n\n      modelGeneration {\n        id\n        name\n      }\n\n      # Operational Leasing fields (will be null for other types)\n      leasingDurationMonths\n      monthlyPayment\n      annualMileageLimit\n      downPaymentLeasing\n      hasServiceIncluded\n      hasWinterTyresIncluded\n      hasAssistanceServiceIncluded\n      hasGapIncluded\n\n      # Direct Purchase fields (will be null for other types)\n      discountAmount\n      discountPercentage\n      includesWarranty\n      warrantyYears\n      financingAvailable\n\n      # Individual Offer fields (will be null for other types)\n      customerId\n      status\n      customRequirements\n      internalNotes\n      assignedToId\n      responseDeadline\n    }\n  }\n": types.GetAllVehicleOffersDocument,
    "\n  query GetOffer($id: String!) {\n    offer(id: $id) {\n      __typename\n      id\n      type\n      isPublic\n      isActive\n      totalPrice\n      description\n      slug\n      modelGenerationId\n      brandId\n      modelId\n      createdAt\n      updatedAt\n\n      modelGeneration {\n        id\n        name\n      }\n\n      # All possible fields\n      leasingDurationMonths\n      monthlyPayment\n      annualMileageLimit\n      downPaymentLeasing\n      hasServiceIncluded\n      hasWinterTyresIncluded\n      hasAssistanceServiceIncluded\n      hasGapIncluded\n\n      discountAmount\n      discountPercentage\n      includesWarranty\n      warrantyYears\n      financingAvailable\n\n      customerId\n      status\n      customRequirements\n      internalNotes\n      assignedToId\n      responseDeadline\n    }\n  }\n": types.GetOfferDocument,
    "\n  query GetIndividualOffers($filters: OfferFiltersInput) {\n    individualOffers(filters: $filters) {\n      __typename\n      id\n      type\n      isPublic\n      isActive\n      totalPrice\n      description\n      slug\n      modelGenerationId\n      brandId\n      modelId\n      createdAt\n      updatedAt\n\n      modelGeneration {\n        id\n        name\n      }\n\n      customerId\n      status\n      customRequirements\n      internalNotes\n      assignedToId\n      responseDeadline\n    }\n  }\n": types.GetIndividualOffersDocument,
    "\n  mutation CreateOperationalLeasingOffer(\n    $input: CreateOperationalLeasingOfferInput!\n  ) {\n    createOperationalLeasingOffer(input: $input) {\n      __typename\n      id\n      type\n      isPublic\n      isActive\n      totalPrice\n      description\n      slug\n      modelGenerationId\n      brandId\n      modelId\n      createdAt\n      updatedAt\n\n      modelGeneration {\n        id\n        name\n      }\n\n      leasingDurationMonths\n      monthlyPayment\n      annualMileageLimit\n      downPaymentLeasing\n      hasServiceIncluded\n      hasWinterTyresIncluded\n      hasAssistanceServiceIncluded\n      hasGapIncluded\n    }\n  }\n": types.CreateOperationalLeasingOfferDocument,
    "\n  mutation CreateDirectPurchaseOffer($input: CreateDirectPurchaseOfferInput!) {\n    createDirectPurchaseOffer(input: $input) {\n      __typename\n      id\n      type\n      isPublic\n      isActive\n      totalPrice\n      description\n      slug\n      modelGenerationId\n      brandId\n      modelId\n      createdAt\n      updatedAt\n\n      modelGeneration {\n        id\n        name\n      }\n\n      discountAmount\n      discountPercentage\n      includesWarranty\n      warrantyYears\n      financingAvailable\n    }\n  }\n": types.CreateDirectPurchaseOfferDocument,
    "\n  mutation CreateIndividualOffer($input: CreateIndividualOfferInput!) {\n    createIndividualOffer(input: $input) {\n      __typename\n      id\n      type\n      isPublic\n      isActive\n      totalPrice\n      description\n      slug\n      modelGenerationId\n      brandId\n      modelId\n      createdAt\n      updatedAt\n\n      modelGeneration {\n        id\n        name\n      }\n\n      customerId\n      status\n      customRequirements\n      internalNotes\n      assignedToId\n      responseDeadline\n    }\n  }\n": types.CreateIndividualOfferDocument,
    "\n  mutation UpdateOffer($id: String!, $input: UpdateOfferInput!) {\n    updateOffer(id: $id, input: $input) {\n      __typename\n      id\n      type\n      isPublic\n      isActive\n      totalPrice\n      description\n      slug\n      modelGenerationId\n      brandId\n      modelId\n      createdAt\n      updatedAt\n\n      modelGeneration {\n        id\n        name\n      }\n\n      # All possible fields\n      leasingDurationMonths\n      monthlyPayment\n      annualMileageLimit\n      downPaymentLeasing\n      hasServiceIncluded\n      hasWinterTyresIncluded\n      hasAssistanceServiceIncluded\n      hasGapIncluded\n\n      discountAmount\n      discountPercentage\n      includesWarranty\n      warrantyYears\n      financingAvailable\n\n      customerId\n      status\n      customRequirements\n      internalNotes\n      assignedToId\n      responseDeadline\n    }\n  }\n": types.UpdateOfferDocument,
    "\n  mutation UpdateIndividualOfferStatus(\n    $id: String!\n    $status: IndividualOfferStatus!\n  ) {\n    updateIndividualOfferStatus(id: $id, status: $status) {\n      __typename\n      id\n      type\n      isPublic\n      isActive\n      totalPrice\n      description\n      slug\n      modelGenerationId\n      brandId\n      modelId\n      createdAt\n      updatedAt\n\n      modelGeneration {\n        id\n        name\n      }\n\n      customerId\n      status\n      customRequirements\n      internalNotes\n      assignedToId\n      responseDeadline\n    }\n  }\n": types.UpdateIndividualOfferStatusDocument,
    "\n  mutation DeleteOffer($id: String!) {\n    deleteOffer(id: $id)\n  }\n": types.DeleteOfferDocument,
    "\n  query GetAllOnboardings($status: OnboardingStatus, $leasingCompanyId: String) {\n    allOnboardings(status: $status, leasingCompanyId: $leasingCompanyId) {\n      id\n      token\n      status\n      expiresAt\n      completedAt\n      createdAt\n      updatedAt\n      carRequest {\n        id\n        requestFirstName\n        requestLastName\n        requestEmail\n        customer {\n          id\n          firstName\n          lastName\n          email\n        }\n      }\n      leasingCompany {\n        id\n        name\n        logo {\n          id\n          url\n        }\n      }\n      documents {\n        id\n        validationStatus\n      }\n    }\n  }\n": types.GetAllOnboardingsDocument,
    "\n  query GetOnboarding($id: String!) {\n    onboarding(id: $id) {\n      id\n      token\n      status\n      expiresAt\n      completedAt\n      lastReminderSentAt\n      createdAt\n      updatedAt\n      carRequest {\n        id\n        requestFirstName\n        requestLastName\n        requestEmail\n        requestPhone\n        financingType\n        customer {\n          id\n          firstName\n          lastName\n          email\n          phone\n        }\n        brand {\n          id\n          name\n        }\n        model {\n          id\n          name\n        }\n      }\n      leasingCompany {\n        id\n        name\n        link\n        logo {\n          id\n          url\n        }\n      }\n      documents {\n        id\n        uploadedAt\n        updatedAt\n        validationStatus\n        validationNote\n        validatedAt\n        file {\n          id\n          name\n          url\n          relativePath\n          size\n          sizeFormatted\n          mimeType\n          extension\n        }\n        documentTemplate {\n          id\n          name\n          fieldName\n          description\n          helpText\n          isRequired\n          acceptedFormats\n          maxSizeBytes\n        }\n        validatedBy {\n          id\n          firstName\n          lastName\n          email\n        }\n      }\n    }\n  }\n": types.GetOnboardingDocument,
    "\n  query GetRequiredDocumentsForOnboarding($onboardingId: String!) {\n    requiredDocumentsForOnboarding(onboardingId: $onboardingId) {\n      id\n      name\n      fieldName\n      description\n      helpText\n      isRequired\n      acceptedFormats\n      maxSizeBytes\n      displayOrder\n    }\n  }\n": types.GetRequiredDocumentsForOnboardingDocument,
    "\n  mutation CreateOnboarding($carRequestId: String!, $expirationDays: Float) {\n    createOnboarding(carRequestId: $carRequestId, expirationDays: $expirationDays) {\n      id\n      token\n      status\n      expiresAt\n      createdAt\n    }\n  }\n": types.CreateOnboardingDocument,
    "\n  mutation ValidateDocument($documentId: String!, $input: ValidateDocumentInput!) {\n    validateDocument(documentId: $documentId, input: $input) {\n      id\n      validationStatus\n      validationNote\n      validatedAt\n      validatedBy {\n        id\n        firstName\n        lastName\n      }\n    }\n  }\n": types.ValidateDocumentDocument,
    "\n  mutation SendOnboardingReminder($onboardingId: String!) {\n    sendOnboardingReminder(onboardingId: $onboardingId)\n  }\n": types.SendOnboardingReminderDocument,
    "\n  mutation UpdateOnboardingStatus($onboardingId: String!, $status: OnboardingStatus!) {\n    updateOnboardingStatus(onboardingId: $onboardingId, status: $status)\n  }\n": types.UpdateOnboardingStatusDocument,
    "\n  query GetAllUsers($limit: Float, $offset: Float) {\n    users(limit: $limit, offset: $offset) {\n      id\n      email\n      firstName\n      lastName\n      roles\n      phone\n      bio\n      isActive\n      createdAt\n      updatedAt\n    }\n  }\n": types.GetAllUsersDocument,
    "\n  query GetUser($id: String!) {\n    user(id: $id) {\n      id\n      email\n      firstName\n      lastName\n      roles\n      phone\n      bio\n      isActive\n      createdAt\n      updatedAt\n    }\n  }\n": types.GetUserDocument,
    "\n  query SearchUsers($query: String!, $limit: Float) {\n    searchUsers(query: $query, limit: $limit) {\n      id\n      email\n      firstName\n      lastName\n      roles\n      isActive\n    }\n  }\n": types.SearchUsersDocument,
    "\n  mutation CreateUser($input: CreateUserInput!) {\n    createUser(input: $input) {\n      id\n      email\n      firstName\n      lastName\n      roles\n      phone\n      bio\n      isActive\n      createdAt\n      updatedAt\n    }\n  }\n": types.CreateUserDocument,
    "\n  mutation UpdateUser($id: String!, $input: UpdateUserInput!) {\n    updateUser(id: $id, input: $input) {\n      id\n      email\n      firstName\n      lastName\n      roles\n      phone\n      bio\n      isActive\n      createdAt\n      updatedAt\n    }\n  }\n": types.UpdateUserDocument,
    "\n  mutation SoftDeleteUser($id: String!) {\n    softDeleteUser(id: $id) {\n      id\n      email\n      firstName\n      lastName\n      isActive\n    }\n  }\n": types.SoftDeleteUserDocument,
    "\n  mutation DeleteUser($id: String!) {\n    deleteUser(id: $id)\n  }\n": types.DeleteUserDocument,
    "\n  query GetUserAuditLogs($userId: String!, $limit: Float) {\n    userActivity(userId: $userId, limit: $limit) {\n      id\n      entityName\n      entityId\n      action\n      oldValue\n      newValue\n      changes\n      userId\n      userEmail\n      ipAddress\n      userAgent\n      metadata\n      createdAt\n    }\n  }\n": types.GetUserAuditLogsDocument,
    "\n  mutation RefreshTokenInternal($input: RefreshTokenInput!) {\n    refreshToken(input: $input) {\n      accessToken\n      refreshToken\n      user {\n        id\n        email\n        firstName\n        lastName\n        roles\n      }\n    }\n  }\n": types.RefreshTokenInternalDocument,
    "\n  mutation GenerateUploadUrl($filename: String!, $contentType: String!) {\n    generateUploadUrl(filename: $filename, contentType: $contentType)\n  }\n": types.GenerateUploadUrlDocument,
    "\n  mutation CreateFile($input: CreateFileInput!) {\n    createFile(input: $input) {\n      id\n      relativePath\n      url\n      name\n      extension\n      size\n      mimeType\n      checksum\n      width\n      height\n      alt\n      title\n      thumbnailPath\n      isImage\n      createdAt\n      updatedAt\n    }\n  }\n": types.CreateFileDocument,
    "\n  mutation DeleteFile($id: String!) {\n    deleteFile(id: $id)\n  }\n": types.DeleteFileDocument,
    "\n  mutation DeleteFileCompletely($id: String!) {\n    deleteFileCompletely(id: $id)\n  }\n": types.DeleteFileCompletelyDocument,
    "\n  query GetFileByChecksum($checksum: String!) {\n    fileByChecksum(checksum: $checksum) {\n      id\n      url\n      relativePath\n      name\n      extension\n      size\n      mimeType\n      checksum\n      width\n      height\n      isImage\n    }\n  }\n": types.GetFileByChecksumDocument,
};

/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 *
 *
 * @example
 * ```ts
 * const query = graphql(`query GetUser($id: ID!) { user(id: $id) { name } }`);
 * ```
 *
 * The query argument is unknown!
 * Please regenerate the types.
 */
export function graphql(source: string): unknown;

/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation Login($input: LoginInput!) {\n    login(input: $input) {\n      accessToken\n      refreshToken\n      user {\n        id\n        email\n        firstName\n        lastName\n        roles\n        isActive\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation Login($input: LoginInput!) {\n    login(input: $input) {\n      accessToken\n      refreshToken\n      user {\n        id\n        email\n        firstName\n        lastName\n        roles\n        isActive\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation RefreshToken($input: RefreshTokenInput!) {\n    refreshToken(input: $input) {\n      accessToken\n      refreshToken\n      user {\n        id\n        email\n        firstName\n        lastName\n        roles\n        isActive\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation RefreshToken($input: RefreshTokenInput!) {\n    refreshToken(input: $input) {\n      accessToken\n      refreshToken\n      user {\n        id\n        email\n        firstName\n        lastName\n        roles\n        isActive\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation ImpersonateUser($input: ImpersonateInput!) {\n    impersonateUser(input: $input) {\n      accessToken\n      refreshToken\n      impersonatedUser {\n        id\n        email\n        firstName\n        lastName\n        roles\n        isActive\n      }\n      originalUser {\n        id\n        email\n        firstName\n        lastName\n        roles\n        isActive\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation ImpersonateUser($input: ImpersonateInput!) {\n    impersonateUser(input: $input) {\n      accessToken\n      refreshToken\n      impersonatedUser {\n        id\n        email\n        firstName\n        lastName\n        roles\n        isActive\n      }\n      originalUser {\n        id\n        email\n        firstName\n        lastName\n        roles\n        isActive\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation StopImpersonation {\n    stopImpersonation {\n      accessToken\n      refreshToken\n      user {\n        id\n        email\n        firstName\n        lastName\n        roles\n        isActive\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation StopImpersonation {\n    stopImpersonation {\n      accessToken\n      refreshToken\n      user {\n        id\n        email\n        firstName\n        lastName\n        roles\n        isActive\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query GetAllBrandEquipments($limit: Float, $offset: Float, $brandId: String) {\n    allBrandEquipments(limit: $limit, offset: $offset, brandId: $brandId) {\n      id\n      name\n      description\n      brandId\n      brand {\n        id\n        name\n        slug\n      }\n      assignedItems {\n        id\n        name\n        legacySystemId\n      }\n      createdAt\n      updatedAt\n    }\n  }\n"): (typeof documents)["\n  query GetAllBrandEquipments($limit: Float, $offset: Float, $brandId: String) {\n    allBrandEquipments(limit: $limit, offset: $offset, brandId: $brandId) {\n      id\n      name\n      description\n      brandId\n      brand {\n        id\n        name\n        slug\n      }\n      assignedItems {\n        id\n        name\n        legacySystemId\n      }\n      createdAt\n      updatedAt\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query GetBrandEquipment($id: String!) {\n    brandEquipment(id: $id) {\n      id\n      name\n      description\n      brandId\n      brand {\n        id\n        name\n        slug\n      }\n      assignedItems {\n        id\n        name\n        legacySystemId\n      }\n      createdAt\n      updatedAt\n    }\n  }\n"): (typeof documents)["\n  query GetBrandEquipment($id: String!) {\n    brandEquipment(id: $id) {\n      id\n      name\n      description\n      brandId\n      brand {\n        id\n        name\n        slug\n      }\n      assignedItems {\n        id\n        name\n        legacySystemId\n      }\n      createdAt\n      updatedAt\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query SearchBrandEquipments($query: String!, $limit: Float) {\n    searchBrandEquipments(query: $query, limit: $limit) {\n      id\n      name\n      description\n      brandId\n      brand {\n        id\n        name\n        slug\n      }\n    }\n  }\n"): (typeof documents)["\n  query SearchBrandEquipments($query: String!, $limit: Float) {\n    searchBrandEquipments(query: $query, limit: $limit) {\n      id\n      name\n      description\n      brandId\n      brand {\n        id\n        name\n        slug\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query GetBrandEquipmentsCount($brandId: String) {\n    brandEquipmentsCount(brandId: $brandId)\n  }\n"): (typeof documents)["\n  query GetBrandEquipmentsCount($brandId: String) {\n    brandEquipmentsCount(brandId: $brandId)\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation CreateBrandEquipment($input: CreateCatalogBrandEquipmentInput!) {\n    createBrandEquipment(input: $input) {\n      id\n      name\n      description\n      brandId\n      brand {\n        id\n        name\n        slug\n      }\n      assignedItems {\n        id\n        name\n        legacySystemId\n      }\n      createdAt\n      updatedAt\n    }\n  }\n"): (typeof documents)["\n  mutation CreateBrandEquipment($input: CreateCatalogBrandEquipmentInput!) {\n    createBrandEquipment(input: $input) {\n      id\n      name\n      description\n      brandId\n      brand {\n        id\n        name\n        slug\n      }\n      assignedItems {\n        id\n        name\n        legacySystemId\n      }\n      createdAt\n      updatedAt\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation UpdateBrandEquipment($id: String!, $input: UpdateCatalogBrandEquipmentInput!) {\n    updateBrandEquipment(id: $id, input: $input) {\n      id\n      name\n      description\n      brandId\n      brand {\n        id\n        name\n        slug\n      }\n      assignedItems {\n        id\n        name\n        legacySystemId\n      }\n      createdAt\n      updatedAt\n    }\n  }\n"): (typeof documents)["\n  mutation UpdateBrandEquipment($id: String!, $input: UpdateCatalogBrandEquipmentInput!) {\n    updateBrandEquipment(id: $id, input: $input) {\n      id\n      name\n      description\n      brandId\n      brand {\n        id\n        name\n        slug\n      }\n      assignedItems {\n        id\n        name\n        legacySystemId\n      }\n      createdAt\n      updatedAt\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation DeleteBrandEquipment($id: String!) {\n    deleteBrandEquipment(id: $id)\n  }\n"): (typeof documents)["\n  mutation DeleteBrandEquipment($id: String!) {\n    deleteBrandEquipment(id: $id)\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query GetAllCatalogBrands($limit: Float, $offset: Float) {\n    allCatalogBrands(limit: $limit, offset: $offset) {\n      id\n      name\n      slug\n      description\n      isActive\n      isHighlighted\n      isRecommended\n      logoId\n      logo {\n        id\n        url\n        alt\n      }\n      legacySystemId\n      legacySlug\n      createdAt\n      updatedAt\n    }\n  }\n"): (typeof documents)["\n  query GetAllCatalogBrands($limit: Float, $offset: Float) {\n    allCatalogBrands(limit: $limit, offset: $offset) {\n      id\n      name\n      slug\n      description\n      isActive\n      isHighlighted\n      isRecommended\n      logoId\n      logo {\n        id\n        url\n        alt\n      }\n      legacySystemId\n      legacySlug\n      createdAt\n      updatedAt\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query GetCatalogBrand($id: String!) {\n    catalogBrand(id: $id) {\n      id\n      name\n      slug\n      description\n      isActive\n      isHighlighted\n      isRecommended\n      logoId\n      logo {\n        id\n        url\n        alt\n      }\n      legacySystemId\n      legacySlug\n      createdAt\n      updatedAt\n    }\n  }\n"): (typeof documents)["\n  query GetCatalogBrand($id: String!) {\n    catalogBrand(id: $id) {\n      id\n      name\n      slug\n      description\n      isActive\n      isHighlighted\n      isRecommended\n      logoId\n      logo {\n        id\n        url\n        alt\n      }\n      legacySystemId\n      legacySlug\n      createdAt\n      updatedAt\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation CreateCatalogBrand($input: CreateCatalogBrandInput!) {\n    createCatalogBrand(input: $input) {\n      id\n      name\n      slug\n      description\n      isActive\n      isHighlighted\n      isRecommended\n      logoId\n      logo {\n        id\n        url\n        alt\n      }\n      legacySystemId\n      legacySlug\n      createdAt\n      updatedAt\n    }\n  }\n"): (typeof documents)["\n  mutation CreateCatalogBrand($input: CreateCatalogBrandInput!) {\n    createCatalogBrand(input: $input) {\n      id\n      name\n      slug\n      description\n      isActive\n      isHighlighted\n      isRecommended\n      logoId\n      logo {\n        id\n        url\n        alt\n      }\n      legacySystemId\n      legacySlug\n      createdAt\n      updatedAt\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation UpdateCatalogBrand($id: String!, $input: UpdateCatalogBrandInput!) {\n    updateCatalogBrand(id: $id, input: $input) {\n      id\n      name\n      slug\n      description\n      isActive\n      isHighlighted\n      isRecommended\n      logoId\n      logo {\n        id\n        url\n        alt\n      }\n      createdAt\n      updatedAt\n    }\n  }\n"): (typeof documents)["\n  mutation UpdateCatalogBrand($id: String!, $input: UpdateCatalogBrandInput!) {\n    updateCatalogBrand(id: $id, input: $input) {\n      id\n      name\n      slug\n      description\n      isActive\n      isHighlighted\n      isRecommended\n      logoId\n      logo {\n        id\n        url\n        alt\n      }\n      createdAt\n      updatedAt\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation DeleteCatalogBrand($id: String!) {\n    deleteCatalogBrand(id: $id)\n  }\n"): (typeof documents)["\n  mutation DeleteCatalogBrand($id: String!) {\n    deleteCatalogBrand(id: $id)\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query CheckBrandSlug($slug: String!) {\n    checkBrandSlugAvailability(slug: $slug) {\n      id\n      slug\n    }\n  }\n"): (typeof documents)["\n  query CheckBrandSlug($slug: String!) {\n    checkBrandSlugAvailability(slug: $slug) {\n      id\n      slug\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query GetLeasingCompanies {\n    leasingCompanies {\n      id\n      name\n    }\n  }\n"): (typeof documents)["\n  query GetLeasingCompanies {\n    leasingCompanies {\n      id\n      name\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment CalculationItem on CarRequestCalculationItem {\n    id\n    itemType\n    name\n    description\n    priceImpact\n    isRequired\n    isIncluded\n    displayOrder\n    catalogColor {\n      id\n      name\n      color\n    }\n    createdAt\n  }\n"): (typeof documents)["\n  fragment CalculationItem on CarRequestCalculationItem {\n    id\n    itemType\n    name\n    description\n    priceImpact\n    isRequired\n    isIncluded\n    displayOrder\n    catalogColor {\n      id\n      name\n      color\n    }\n    createdAt\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment CalculationOffer on CarRequestCalculationOffer {\n    id\n    status\n    monthlyPayment\n    downPayment\n    totalPrice\n    interestRate\n    adminFee\n    includesService\n    includesWinterTires\n    includesGap\n    includesAssistance\n    termsAndConditions\n    validUntil\n    notes\n    leasingCompany {\n      id\n      name\n      logo {\n        id\n        url\n      }\n    }\n    quotedBy {\n      id\n      firstName\n      lastName\n      email\n    }\n    quotedAt\n    createdAt\n    updatedAt\n  }\n"): (typeof documents)["\n  fragment CalculationOffer on CarRequestCalculationOffer {\n    id\n    status\n    monthlyPayment\n    downPayment\n    totalPrice\n    interestRate\n    adminFee\n    includesService\n    includesWinterTires\n    includesGap\n    includesAssistance\n    termsAndConditions\n    validUntil\n    notes\n    leasingCompany {\n      id\n      name\n      logo {\n        id\n        url\n      }\n    }\n    quotedBy {\n      id\n      firstName\n      lastName\n      email\n    }\n    quotedAt\n    createdAt\n    updatedAt\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment Calculation on CarRequestCalculation {\n    id\n    version\n    status\n    durationMonths\n    annualMileageKm\n    deliveryExpectedAt\n    notes\n    internalNotes\n    requestedBy {\n      id\n      firstName\n      lastName\n      email\n    }\n    assignedTo {\n      id\n      firstName\n      lastName\n      email\n    }\n    createdAt\n    updatedAt\n    submittedAt\n    completedAt\n  }\n"): (typeof documents)["\n  fragment Calculation on CarRequestCalculation {\n    id\n    version\n    status\n    durationMonths\n    annualMileageKm\n    deliveryExpectedAt\n    notes\n    internalNotes\n    requestedBy {\n      id\n      firstName\n      lastName\n      email\n    }\n    assignedTo {\n      id\n      firstName\n      lastName\n      email\n    }\n    createdAt\n    updatedAt\n    submittedAt\n    completedAt\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query GetCalculation($id: ID!) {\n    calculation(id: $id) {\n      ...Calculation\n      carRequest {\n        id\n        brand {\n          id\n          name\n        }\n        model {\n          id\n          name\n        }\n      }\n      offers {\n        ...CalculationOffer\n      }\n      items {\n        ...CalculationItem\n      }\n    }\n  }\n"): (typeof documents)["\n  query GetCalculation($id: ID!) {\n    calculation(id: $id) {\n      ...Calculation\n      carRequest {\n        id\n        brand {\n          id\n          name\n        }\n        model {\n          id\n          name\n        }\n      }\n      offers {\n        ...CalculationOffer\n      }\n      items {\n        ...CalculationItem\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query GetCalculationsByCarRequest($carRequestId: ID!) {\n    calculationsByCarRequest(carRequestId: $carRequestId) {\n      ...Calculation\n      offers {\n        id\n        status\n        leasingCompany {\n          id\n          name\n        }\n      }\n      items {\n        id\n        itemType\n        name\n      }\n    }\n  }\n"): (typeof documents)["\n  query GetCalculationsByCarRequest($carRequestId: ID!) {\n    calculationsByCarRequest(carRequestId: $carRequestId) {\n      ...Calculation\n      offers {\n        id\n        status\n        leasingCompany {\n          id\n          name\n        }\n      }\n      items {\n        id\n        itemType\n        name\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query GetPendingCalculations {\n    pendingCalculations {\n      ...Calculation\n      carRequest {\n        id\n        brand {\n          id\n          name\n        }\n        model {\n          id\n          name\n        }\n        customer {\n          id\n          firstName\n          lastName\n          email\n        }\n      }\n      offers {\n        id\n        status\n        leasingCompany {\n          id\n          name\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query GetPendingCalculations {\n    pendingCalculations {\n      ...Calculation\n      carRequest {\n        id\n        brand {\n          id\n          name\n        }\n        model {\n          id\n          name\n        }\n        customer {\n          id\n          firstName\n          lastName\n          email\n        }\n      }\n      offers {\n        id\n        status\n        leasingCompany {\n          id\n          name\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation CreateCalculation($input: CreateCalculationInput!) {\n    createCalculation(input: $input) {\n      ...Calculation\n    }\n  }\n"): (typeof documents)["\n  mutation CreateCalculation($input: CreateCalculationInput!) {\n    createCalculation(input: $input) {\n      ...Calculation\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation UpdateCalculation($id: ID!, $input: UpdateCalculationInput!) {\n    updateCalculation(id: $id, input: $input) {\n      ...Calculation\n    }\n  }\n"): (typeof documents)["\n  mutation UpdateCalculation($id: ID!, $input: UpdateCalculationInput!) {\n    updateCalculation(id: $id, input: $input) {\n      ...Calculation\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation SubmitCalculation($id: ID!) {\n    submitCalculation(id: $id) {\n      ...Calculation\n    }\n  }\n"): (typeof documents)["\n  mutation SubmitCalculation($id: ID!) {\n    submitCalculation(id: $id) {\n      ...Calculation\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation StartProcessingCalculation($id: ID!) {\n    startProcessingCalculation(id: $id) {\n      ...Calculation\n    }\n  }\n"): (typeof documents)["\n  mutation StartProcessingCalculation($id: ID!) {\n    startProcessingCalculation(id: $id) {\n      ...Calculation\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation CompleteCalculation($id: ID!) {\n    completeCalculation(id: $id) {\n      ...Calculation\n    }\n  }\n"): (typeof documents)["\n  mutation CompleteCalculation($id: ID!) {\n    completeCalculation(id: $id) {\n      ...Calculation\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation AddOfferQuote($input: AddOfferQuoteInput!) {\n    addOfferQuote(input: $input) {\n      ...CalculationOffer\n    }\n  }\n"): (typeof documents)["\n  mutation AddOfferQuote($input: AddOfferQuoteInput!) {\n    addOfferQuote(input: $input) {\n      ...CalculationOffer\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation UpdateOfferQuote($offerId: ID!, $input: UpdateOfferQuoteInput!) {\n    updateOfferQuote(offerId: $offerId, input: $input) {\n      ...CalculationOffer\n    }\n  }\n"): (typeof documents)["\n  mutation UpdateOfferQuote($offerId: ID!, $input: UpdateOfferQuoteInput!) {\n    updateOfferQuote(offerId: $offerId, input: $input) {\n      ...CalculationOffer\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation DeleteCalculation($id: ID!) {\n    deleteCalculation(id: $id)\n  }\n"): (typeof documents)["\n  mutation DeleteCalculation($id: ID!) {\n    deleteCalculation(id: $id)\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query CarRequestsDashboardStats {\n    carRequestsDashboardStats {\n      overview {\n        activeCarRequests\n        totalVehicles\n        awaitingAction\n        completedOnboardingsThisMonth\n        activeCarRequestsChange\n        totalVehiclesChange\n      }\n      topBrands {\n        brandId\n        brandName\n        calculationsCount\n        percentage\n      }\n      agentPerformance {\n        agentId\n        agentName\n        carRequestsCount\n        vehiclesCount\n        conversionRate\n        averageProcessingDays\n      }\n      leasingCompanies {\n        leasingCompanyId\n        leasingCompanyName\n        calculationsCount\n        completedOnboardingsCount\n        conversionRate\n      }\n      timeline {\n        date\n        newCarRequests\n        completedOnboardings\n      }\n      funnel {\n        created\n        hasOffers\n        leasingCompanySelected\n        onboardingComplete\n        ordered\n      }\n    }\n  }\n"): (typeof documents)["\n  query CarRequestsDashboardStats {\n    carRequestsDashboardStats {\n      overview {\n        activeCarRequests\n        totalVehicles\n        awaitingAction\n        completedOnboardingsThisMonth\n        activeCarRequestsChange\n        totalVehiclesChange\n      }\n      topBrands {\n        brandId\n        brandName\n        calculationsCount\n        percentage\n      }\n      agentPerformance {\n        agentId\n        agentName\n        carRequestsCount\n        vehiclesCount\n        conversionRate\n        averageProcessingDays\n      }\n      leasingCompanies {\n        leasingCompanyId\n        leasingCompanyName\n        calculationsCount\n        completedOnboardingsCount\n        conversionRate\n      }\n      timeline {\n        date\n        newCarRequests\n        completedOnboardings\n      }\n      funnel {\n        created\n        hasOffers\n        leasingCompanySelected\n        onboardingComplete\n        ordered\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query GetAllCarRequests($limit: Float, $offset: Float) {\n    allCarRequests(limit: $limit, offset: $offset) {\n      id\n      isFromLegacySystem\n      legacySystemId\n      createdAt\n      modifiedAt\n      notes\n      financingType\n      requestEmail\n      requestPhone\n      requestFirstName\n      requestLastName\n      requestNewsletter\n      requestPostalCode\n      customer {\n        id\n        firstName\n        lastName\n        email\n      }\n      customerId\n      assignedAgent {\n        id\n        firstName\n        lastName\n        email\n      }\n      assignedAgentId\n      brand {\n        id\n        name\n        slug\n      }\n      brandId\n      model {\n        id\n        name\n        slug\n      }\n      modelId\n      leasingCompany {\n        id\n        name\n      }\n      leasingCompanyId\n      order\n      gclid\n      noteInternal\n      completedAt\n      nextCallAt\n      confirmedAt\n      relayedAt\n      feedbackAt\n      closedAt\n      waitingForOffer\n      offersSentAt\n      deliveryExpectedAt\n      carDelivered\n      displayOrder\n      cancellationReason\n      cancellationNote\n      status {\n        id\n        name\n        code\n        colorHex\n        isFinal\n      }\n      statusId\n      state {\n        id\n        name\n        code\n        colorHex\n      }\n      stateId\n    }\n  }\n"): (typeof documents)["\n  query GetAllCarRequests($limit: Float, $offset: Float) {\n    allCarRequests(limit: $limit, offset: $offset) {\n      id\n      isFromLegacySystem\n      legacySystemId\n      createdAt\n      modifiedAt\n      notes\n      financingType\n      requestEmail\n      requestPhone\n      requestFirstName\n      requestLastName\n      requestNewsletter\n      requestPostalCode\n      customer {\n        id\n        firstName\n        lastName\n        email\n      }\n      customerId\n      assignedAgent {\n        id\n        firstName\n        lastName\n        email\n      }\n      assignedAgentId\n      brand {\n        id\n        name\n        slug\n      }\n      brandId\n      model {\n        id\n        name\n        slug\n      }\n      modelId\n      leasingCompany {\n        id\n        name\n      }\n      leasingCompanyId\n      order\n      gclid\n      noteInternal\n      completedAt\n      nextCallAt\n      confirmedAt\n      relayedAt\n      feedbackAt\n      closedAt\n      waitingForOffer\n      offersSentAt\n      deliveryExpectedAt\n      carDelivered\n      displayOrder\n      cancellationReason\n      cancellationNote\n      status {\n        id\n        name\n        code\n        colorHex\n        isFinal\n      }\n      statusId\n      state {\n        id\n        name\n        code\n        colorHex\n      }\n      stateId\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query GetCarRequest($id: String!) {\n    carRequest(id: $id) {\n      id\n      isFromLegacySystem\n      legacySystemId\n      createdAt\n      modifiedAt\n      notes\n      financingType\n      requestEmail\n      requestPhone\n      requestFirstName\n      requestLastName\n      requestNewsletter\n      requestPostalCode\n      customer {\n        id\n        firstName\n        lastName\n        email\n      }\n      customerId\n      assignedAgent {\n        id\n        firstName\n        lastName\n        email\n      }\n      assignedAgentId\n      brand {\n        id\n        name\n        slug\n      }\n      brandId\n      model {\n        id\n        name\n        slug\n      }\n      modelId\n      leasingCompany {\n        id\n        name\n      }\n      leasingCompanyId\n      order\n      gclid\n      noteInternal\n      completedAt\n      nextCallAt\n      confirmedAt\n      relayedAt\n      feedbackAt\n      closedAt\n      waitingForOffer\n      offersSentAt\n      deliveryExpectedAt\n      carDelivered\n      displayOrder\n      cancellationReason\n      cancellationNote\n      status {\n        id\n        name\n        code\n        colorHex\n        isFinal\n      }\n      statusId\n      state {\n        id\n        name\n        code\n        colorHex\n      }\n      stateId\n      logs {\n        id\n        createdAt\n        message\n        actionType\n        metadata\n        carRequestId\n        author {\n          id\n          firstName\n          lastName\n          email\n        }\n        authorId\n        legacySystemId\n      }\n    }\n  }\n"): (typeof documents)["\n  query GetCarRequest($id: String!) {\n    carRequest(id: $id) {\n      id\n      isFromLegacySystem\n      legacySystemId\n      createdAt\n      modifiedAt\n      notes\n      financingType\n      requestEmail\n      requestPhone\n      requestFirstName\n      requestLastName\n      requestNewsletter\n      requestPostalCode\n      customer {\n        id\n        firstName\n        lastName\n        email\n      }\n      customerId\n      assignedAgent {\n        id\n        firstName\n        lastName\n        email\n      }\n      assignedAgentId\n      brand {\n        id\n        name\n        slug\n      }\n      brandId\n      model {\n        id\n        name\n        slug\n      }\n      modelId\n      leasingCompany {\n        id\n        name\n      }\n      leasingCompanyId\n      order\n      gclid\n      noteInternal\n      completedAt\n      nextCallAt\n      confirmedAt\n      relayedAt\n      feedbackAt\n      closedAt\n      waitingForOffer\n      offersSentAt\n      deliveryExpectedAt\n      carDelivered\n      displayOrder\n      cancellationReason\n      cancellationNote\n      status {\n        id\n        name\n        code\n        colorHex\n        isFinal\n      }\n      statusId\n      state {\n        id\n        name\n        code\n        colorHex\n      }\n      stateId\n      logs {\n        id\n        createdAt\n        message\n        actionType\n        metadata\n        carRequestId\n        author {\n          id\n          firstName\n          lastName\n          email\n        }\n        authorId\n        legacySystemId\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation CreateCarRequest($input: CreateCarRequestInput!) {\n    createCarRequest(input: $input) {\n      id\n      createdAt\n      modifiedAt\n    }\n  }\n"): (typeof documents)["\n  mutation CreateCarRequest($input: CreateCarRequestInput!) {\n    createCarRequest(input: $input) {\n      id\n      createdAt\n      modifiedAt\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation UpdateCarRequest($id: String!, $input: UpdateCarRequestInput!) {\n    updateCarRequest(id: $id, input: $input) {\n      id\n      modifiedAt\n    }\n  }\n"): (typeof documents)["\n  mutation UpdateCarRequest($id: String!, $input: UpdateCarRequestInput!) {\n    updateCarRequest(id: $id, input: $input) {\n      id\n      modifiedAt\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation DeleteCarRequest($id: String!) {\n    deleteCarRequest(id: $id)\n  }\n"): (typeof documents)["\n  mutation DeleteCarRequest($id: String!) {\n    deleteCarRequest(id: $id)\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query GetAllCarRequestStates {\n    allCarRequestStates {\n      id\n      name\n      code\n      colorHex\n      createdAt\n      updatedAt\n    }\n  }\n"): (typeof documents)["\n  query GetAllCarRequestStates {\n    allCarRequestStates {\n      id\n      name\n      code\n      colorHex\n      createdAt\n      updatedAt\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query GetAllCarRequestStatuses {\n    allCarRequestStatuses {\n      id\n      name\n      code\n      colorHex\n      isFinal\n      displayOrder\n      columnDisplayOrder\n      createdAt\n      updatedAt\n    }\n  }\n"): (typeof documents)["\n  query GetAllCarRequestStatuses {\n    allCarRequestStatuses {\n      id\n      name\n      code\n      colorHex\n      isFinal\n      displayOrder\n      columnDisplayOrder\n      createdAt\n      updatedAt\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query GetCarRequestLogs($filter: CarRequestLogFilterInput!) {\n    carRequestLogs(filter: $filter) {\n      id\n      createdAt\n      message\n      actionType\n      metadata\n      carRequestId\n      author {\n        id\n        firstName\n        lastName\n        email\n      }\n      authorId\n      legacySystemId\n    }\n  }\n"): (typeof documents)["\n  query GetCarRequestLogs($filter: CarRequestLogFilterInput!) {\n    carRequestLogs(filter: $filter) {\n      id\n      createdAt\n      message\n      actionType\n      metadata\n      carRequestId\n      author {\n        id\n        firstName\n        lastName\n        email\n      }\n      authorId\n      legacySystemId\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation CreateCarRequestLog($input: CreateCarRequestLogInput!) {\n    createCarRequestLog(input: $input) {\n      id\n      createdAt\n      message\n      actionType\n      metadata\n      carRequestId\n      author {\n        id\n        firstName\n        lastName\n        email\n      }\n      authorId\n      legacySystemId\n    }\n  }\n"): (typeof documents)["\n  mutation CreateCarRequestLog($input: CreateCarRequestLogInput!) {\n    createCarRequestLog(input: $input) {\n      id\n      createdAt\n      message\n      actionType\n      metadata\n      carRequestId\n      author {\n        id\n        firstName\n        lastName\n        email\n      }\n      authorId\n      legacySystemId\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query GetAllOffers {\n    allOffers {\n      id\n      type\n      isPublic\n      isActive\n      totalPrice\n      description\n      slug\n      modelGeneration {\n        id\n        name\n      }\n      brand {\n        id\n        name\n      }\n      model {\n        id\n        name\n      }\n      leasingDurationMonths\n      monthlyPayment\n      annualMileageLimit\n      downPaymentLeasing\n      hasServiceIncluded\n      hasWinterTyresIncluded\n      hasAssistanceServiceIncluded\n      hasGapIncluded\n      discountAmount\n      discountPercentage\n      includesWarranty\n      warrantyYears\n      financingAvailable\n      createdAt\n      updatedAt\n    }\n  }\n"): (typeof documents)["\n  query GetAllOffers {\n    allOffers {\n      id\n      type\n      isPublic\n      isActive\n      totalPrice\n      description\n      slug\n      modelGeneration {\n        id\n        name\n      }\n      brand {\n        id\n        name\n      }\n      model {\n        id\n        name\n      }\n      leasingDurationMonths\n      monthlyPayment\n      annualMileageLimit\n      downPaymentLeasing\n      hasServiceIncluded\n      hasWinterTyresIncluded\n      hasAssistanceServiceIncluded\n      hasGapIncluded\n      discountAmount\n      discountPercentage\n      includesWarranty\n      warrantyYears\n      financingAvailable\n      createdAt\n      updatedAt\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query GetUsers {\n    users(limit: 100) {\n      id\n      firstName\n      lastName\n      email\n      roles\n    }\n  }\n"): (typeof documents)["\n  query GetUsers {\n    users(limit: 100) {\n      id\n      firstName\n      lastName\n      email\n      roles\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query GetAllCatalogColors($limit: Float, $offset: Float, $type: CatalogColorType) {\n    catalogColors(limit: $limit, offset: $offset, type: $type) {\n      id\n      name\n      slug\n      color\n      type\n      legacySystemId\n      createdAt\n    }\n  }\n"): (typeof documents)["\n  query GetAllCatalogColors($limit: Float, $offset: Float, $type: CatalogColorType) {\n    catalogColors(limit: $limit, offset: $offset, type: $type) {\n      id\n      name\n      slug\n      color\n      type\n      legacySystemId\n      createdAt\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query GetCatalogColor($id: String!) {\n    catalogColor(id: $id) {\n      id\n      name\n      slug\n      color\n      type\n      legacySystemId\n      createdAt\n    }\n  }\n"): (typeof documents)["\n  query GetCatalogColor($id: String!) {\n    catalogColor(id: $id) {\n      id\n      name\n      slug\n      color\n      type\n      legacySystemId\n      createdAt\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation CreateCatalogColor($input: CreateCatalogColorInput!) {\n    createCatalogColor(input: $input) {\n      id\n      name\n      slug\n      color\n      type\n      legacySystemId\n      createdAt\n    }\n  }\n"): (typeof documents)["\n  mutation CreateCatalogColor($input: CreateCatalogColorInput!) {\n    createCatalogColor(input: $input) {\n      id\n      name\n      slug\n      color\n      type\n      legacySystemId\n      createdAt\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation UpdateCatalogColor($id: String!, $input: UpdateCatalogColorInput!) {\n    updateCatalogColor(id: $id, input: $input) {\n      id\n      name\n      slug\n      color\n      type\n      legacySystemId\n      createdAt\n    }\n  }\n"): (typeof documents)["\n  mutation UpdateCatalogColor($id: String!, $input: UpdateCatalogColorInput!) {\n    updateCatalogColor(id: $id, input: $input) {\n      id\n      name\n      slug\n      color\n      type\n      legacySystemId\n      createdAt\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation DeleteCatalogColor($id: String!) {\n    deleteCatalogColor(id: $id)\n  }\n"): (typeof documents)["\n  mutation DeleteCatalogColor($id: String!) {\n    deleteCatalogColor(id: $id)\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query GetCustomerDetail($id: String!) {\n    user(id: $id) {\n      id\n      email\n      firstName\n      lastName\n      phone\n      bio\n      roles\n      isActive\n      avatar {\n        id\n        url\n      }\n      createdAt\n      updatedAt\n    }\n  }\n"): (typeof documents)["\n  query GetCustomerDetail($id: String!) {\n    user(id: $id) {\n      id\n      email\n      firstName\n      lastName\n      phone\n      bio\n      roles\n      isActive\n      avatar {\n        id\n        url\n      }\n      createdAt\n      updatedAt\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query GetOnboardingsWithDocuments($status: OnboardingStatus, $leasingCompanyId: String) {\n    allOnboardings(status: $status, leasingCompanyId: $leasingCompanyId) {\n      id\n      token\n      status\n      expiresAt\n      completedAt\n      createdAt\n      updatedAt\n      carRequest {\n        id\n        requestFirstName\n        requestLastName\n        requestEmail\n        customer {\n          id\n          firstName\n          lastName\n          email\n        }\n      }\n      leasingCompany {\n        id\n        name\n        logo {\n          id\n          url\n        }\n      }\n      documents {\n        id\n        uploadedAt\n        updatedAt\n        validationStatus\n        validationNote\n        validatedAt\n        file {\n          id\n          name\n          url\n          size\n          mimeType\n        }\n        documentTemplate {\n          id\n          name\n          fieldName\n        }\n        validatedBy {\n          id\n          firstName\n          lastName\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query GetOnboardingsWithDocuments($status: OnboardingStatus, $leasingCompanyId: String) {\n    allOnboardings(status: $status, leasingCompanyId: $leasingCompanyId) {\n      id\n      token\n      status\n      expiresAt\n      completedAt\n      createdAt\n      updatedAt\n      carRequest {\n        id\n        requestFirstName\n        requestLastName\n        requestEmail\n        customer {\n          id\n          firstName\n          lastName\n          email\n        }\n      }\n      leasingCompany {\n        id\n        name\n        logo {\n          id\n          url\n        }\n      }\n      documents {\n        id\n        uploadedAt\n        updatedAt\n        validationStatus\n        validationNote\n        validatedAt\n        file {\n          id\n          name\n          url\n          size\n          mimeType\n        }\n        documentTemplate {\n          id\n          name\n          fieldName\n        }\n        validatedBy {\n          id\n          firstName\n          lastName\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query GetUserActivity($userId: String!, $limit: Float) {\n    userActivity(userId: $userId, limit: $limit) {\n      id\n      action\n      entityName\n      entityId\n      changes\n      userId\n      userEmail\n      ipAddress\n      userAgent\n      createdAt\n    }\n  }\n"): (typeof documents)["\n  query GetUserActivity($userId: String!, $limit: Float) {\n    userActivity(userId: $userId, limit: $limit) {\n      id\n      action\n      entityName\n      entityId\n      changes\n      userId\n      userEmail\n      ipAddress\n      userAgent\n      createdAt\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query GetCarRequestsCount {\n    carRequestsCount\n  }\n"): (typeof documents)["\n  query GetCarRequestsCount {\n    carRequestsCount\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query GetAllCustomers($limit: Float, $offset: Float) {\n    users(limit: $limit, offset: $offset) {\n      id\n      email\n      firstName\n      lastName\n      phone\n      roles\n      isActive\n      avatar {\n        id\n        url\n      }\n      createdAt\n      updatedAt\n    }\n  }\n"): (typeof documents)["\n  query GetAllCustomers($limit: Float, $offset: Float) {\n    users(limit: $limit, offset: $offset) {\n      id\n      email\n      firstName\n      lastName\n      phone\n      roles\n      isActive\n      avatar {\n        id\n        url\n      }\n      createdAt\n      updatedAt\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query GetCustomer($id: String!) {\n    user(id: $id) {\n      id\n      email\n      firstName\n      lastName\n      phone\n      bio\n      roles\n      isActive\n      avatar {\n        id\n        url\n      }\n      createdAt\n      updatedAt\n    }\n  }\n"): (typeof documents)["\n  query GetCustomer($id: String!) {\n    user(id: $id) {\n      id\n      email\n      firstName\n      lastName\n      phone\n      bio\n      roles\n      isActive\n      avatar {\n        id\n        url\n      }\n      createdAt\n      updatedAt\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query SearchCustomers($query: String!, $limit: Float) {\n    searchUsers(query: $query, limit: $limit) {\n      id\n      email\n      firstName\n      lastName\n      phone\n      roles\n      isActive\n      avatar {\n        id\n        url\n      }\n      createdAt\n      updatedAt\n    }\n  }\n"): (typeof documents)["\n  query SearchCustomers($query: String!, $limit: Float) {\n    searchUsers(query: $query, limit: $limit) {\n      id\n      email\n      firstName\n      lastName\n      phone\n      roles\n      isActive\n      avatar {\n        id\n        url\n      }\n      createdAt\n      updatedAt\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query GetAllDocumentTemplates($leasingCompanyId: String) {\n    allDocumentTemplates(leasingCompanyId: $leasingCompanyId) {\n      id\n      name\n      fieldName\n      description\n      helpText\n      isRequired\n      acceptedFormats\n      maxSizeBytes\n      displayOrder\n      isGlobal\n      createdAt\n      updatedAt\n      leasingCompany {\n        id\n        name\n      }\n    }\n  }\n"): (typeof documents)["\n  query GetAllDocumentTemplates($leasingCompanyId: String) {\n    allDocumentTemplates(leasingCompanyId: $leasingCompanyId) {\n      id\n      name\n      fieldName\n      description\n      helpText\n      isRequired\n      acceptedFormats\n      maxSizeBytes\n      displayOrder\n      isGlobal\n      createdAt\n      updatedAt\n      leasingCompany {\n        id\n        name\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query GetDocumentTemplatesByLeasingCompany($leasingCompanyId: String!) {\n    documentTemplatesByLeasingCompany(leasingCompanyId: $leasingCompanyId) {\n      id\n      name\n      fieldName\n      description\n      helpText\n      isRequired\n      acceptedFormats\n      maxSizeBytes\n      displayOrder\n      createdAt\n      updatedAt\n    }\n  }\n"): (typeof documents)["\n  query GetDocumentTemplatesByLeasingCompany($leasingCompanyId: String!) {\n    documentTemplatesByLeasingCompany(leasingCompanyId: $leasingCompanyId) {\n      id\n      name\n      fieldName\n      description\n      helpText\n      isRequired\n      acceptedFormats\n      maxSizeBytes\n      displayOrder\n      createdAt\n      updatedAt\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query GetDocumentTemplate($id: String!) {\n    documentTemplate(id: $id) {\n      id\n      name\n      fieldName\n      description\n      helpText\n      isRequired\n      acceptedFormats\n      maxSizeBytes\n      displayOrder\n      isGlobal\n      createdAt\n      updatedAt\n      leasingCompany {\n        id\n        name\n      }\n    }\n  }\n"): (typeof documents)["\n  query GetDocumentTemplate($id: String!) {\n    documentTemplate(id: $id) {\n      id\n      name\n      fieldName\n      description\n      helpText\n      isRequired\n      acceptedFormats\n      maxSizeBytes\n      displayOrder\n      isGlobal\n      createdAt\n      updatedAt\n      leasingCompany {\n        id\n        name\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation CreateDocumentTemplate($input: CreateDocumentTemplateInput!) {\n    createDocumentTemplate(input: $input) {\n      id\n      name\n      fieldName\n      description\n      helpText\n      isRequired\n      acceptedFormats\n      maxSizeBytes\n      displayOrder\n      createdAt\n    }\n  }\n"): (typeof documents)["\n  mutation CreateDocumentTemplate($input: CreateDocumentTemplateInput!) {\n    createDocumentTemplate(input: $input) {\n      id\n      name\n      fieldName\n      description\n      helpText\n      isRequired\n      acceptedFormats\n      maxSizeBytes\n      displayOrder\n      createdAt\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation UpdateDocumentTemplate($id: String!, $input: UpdateDocumentTemplateInput!) {\n    updateDocumentTemplate(id: $id, input: $input) {\n      id\n      name\n      fieldName\n      description\n      helpText\n      isRequired\n      acceptedFormats\n      maxSizeBytes\n      displayOrder\n      updatedAt\n    }\n  }\n"): (typeof documents)["\n  mutation UpdateDocumentTemplate($id: String!, $input: UpdateDocumentTemplateInput!) {\n    updateDocumentTemplate(id: $id, input: $input) {\n      id\n      name\n      fieldName\n      description\n      helpText\n      isRequired\n      acceptedFormats\n      maxSizeBytes\n      displayOrder\n      updatedAt\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation DeleteDocumentTemplate($id: String!) {\n    deleteDocumentTemplate(id: $id)\n  }\n"): (typeof documents)["\n  mutation DeleteDocumentTemplate($id: String!) {\n    deleteDocumentTemplate(id: $id)\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation ReorderDocumentTemplates($ids: [String!]!) {\n    reorderDocumentTemplates(ids: $ids)\n  }\n"): (typeof documents)["\n  mutation ReorderDocumentTemplates($ids: [String!]!) {\n    reorderDocumentTemplates(ids: $ids)\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query GetAllEngines(\n    $limit: Float\n    $offset: Float\n    $generationId: String\n    $fuelType: CatalogEngineFuelType\n    $transmissionType: CatalogEngineTransmissionType\n    $driveType: CatalogEngineDriveType\n    $activeOnly: Boolean\n    $recommendedOnly: Boolean\n  ) {\n    allEngines(\n      limit: $limit\n      offset: $offset\n      generationId: $generationId\n      fuelType: $fuelType\n      transmissionType: $transmissionType\n      driveType: $driveType\n      activeOnly: $activeOnly\n      recommendedOnly: $recommendedOnly\n    ) {\n      id\n      name\n      generationId\n      generation {\n        id\n        name\n        slug\n        model {\n          id\n          name\n          slug\n          brand {\n            id\n            name\n            slug\n          }\n        }\n      }\n      fuelType\n      transmissionType\n      driveType\n      consumptionCombined\n      consumptionCity\n      consumptionOutOfCity\n      performance\n      torque\n      volume\n      emission\n      rangeKm\n      acceleration\n      fuelTankVolume\n      cylinderCount\n      maxSpeed\n      weight\n      gearsCount\n      productionStart\n      productionStop\n      active\n      recommended\n    }\n  }\n"): (typeof documents)["\n  query GetAllEngines(\n    $limit: Float\n    $offset: Float\n    $generationId: String\n    $fuelType: CatalogEngineFuelType\n    $transmissionType: CatalogEngineTransmissionType\n    $driveType: CatalogEngineDriveType\n    $activeOnly: Boolean\n    $recommendedOnly: Boolean\n  ) {\n    allEngines(\n      limit: $limit\n      offset: $offset\n      generationId: $generationId\n      fuelType: $fuelType\n      transmissionType: $transmissionType\n      driveType: $driveType\n      activeOnly: $activeOnly\n      recommendedOnly: $recommendedOnly\n    ) {\n      id\n      name\n      generationId\n      generation {\n        id\n        name\n        slug\n        model {\n          id\n          name\n          slug\n          brand {\n            id\n            name\n            slug\n          }\n        }\n      }\n      fuelType\n      transmissionType\n      driveType\n      consumptionCombined\n      consumptionCity\n      consumptionOutOfCity\n      performance\n      torque\n      volume\n      emission\n      rangeKm\n      acceleration\n      fuelTankVolume\n      cylinderCount\n      maxSpeed\n      weight\n      gearsCount\n      productionStart\n      productionStop\n      active\n      recommended\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query GetEngine($id: String!) {\n    engine(id: $id) {\n      id\n      name\n      generationId\n      generation {\n        id\n        name\n        slug\n        model {\n          id\n          name\n          slug\n          brand {\n            id\n            name\n            slug\n          }\n        }\n      }\n      fuelType\n      transmissionType\n      driveType\n      consumptionCombined\n      consumptionCity\n      consumptionOutOfCity\n      performance\n      torque\n      volume\n      emission\n      rangeKm\n      acceleration\n      fuelTankVolume\n      cylinderCount\n      maxSpeed\n      weight\n      gearsCount\n      productionStart\n      productionStop\n      active\n      recommended\n    }\n  }\n"): (typeof documents)["\n  query GetEngine($id: String!) {\n    engine(id: $id) {\n      id\n      name\n      generationId\n      generation {\n        id\n        name\n        slug\n        model {\n          id\n          name\n          slug\n          brand {\n            id\n            name\n            slug\n          }\n        }\n      }\n      fuelType\n      transmissionType\n      driveType\n      consumptionCombined\n      consumptionCity\n      consumptionOutOfCity\n      performance\n      torque\n      volume\n      emission\n      rangeKm\n      acceleration\n      fuelTankVolume\n      cylinderCount\n      maxSpeed\n      weight\n      gearsCount\n      productionStart\n      productionStop\n      active\n      recommended\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query GetEnginesByGeneration($generationId: String!) {\n    allEngines(generationId: $generationId, limit: 1000) {\n      id\n      name\n      fuelType\n      transmissionType\n      driveType\n      performance\n      torque\n      acceleration\n      active\n      recommended\n    }\n  }\n"): (typeof documents)["\n  query GetEnginesByGeneration($generationId: String!) {\n    allEngines(generationId: $generationId, limit: 1000) {\n      id\n      name\n      fuelType\n      transmissionType\n      driveType\n      performance\n      torque\n      acceleration\n      active\n      recommended\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query GetEnginesCount(\n    $generationId: String\n    $fuelType: CatalogEngineFuelType\n  ) {\n    enginesCount(generationId: $generationId, fuelType: $fuelType)\n  }\n"): (typeof documents)["\n  query GetEnginesCount(\n    $generationId: String\n    $fuelType: CatalogEngineFuelType\n  ) {\n    enginesCount(generationId: $generationId, fuelType: $fuelType)\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query SearchEngines($query: String!, $limit: Float) {\n    searchEngines(query: $query, limit: $limit) {\n      id\n      name\n      generation {\n        id\n        name\n        model {\n          id\n          name\n          brand {\n            id\n            name\n          }\n        }\n      }\n      fuelType\n      transmissionType\n      driveType\n    }\n  }\n"): (typeof documents)["\n  query SearchEngines($query: String!, $limit: Float) {\n    searchEngines(query: $query, limit: $limit) {\n      id\n      name\n      generation {\n        id\n        name\n        model {\n          id\n          name\n          brand {\n            id\n            name\n          }\n        }\n      }\n      fuelType\n      transmissionType\n      driveType\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation CreateEngine($input: CreateCatalogEngineInput!) {\n    createEngine(input: $input) {\n      id\n      name\n      generationId\n      generation {\n        id\n        name\n        slug\n      }\n      fuelType\n      transmissionType\n      driveType\n      consumptionCombined\n      consumptionCity\n      consumptionOutOfCity\n      performance\n      torque\n      volume\n      emission\n      rangeKm\n      acceleration\n      fuelTankVolume\n      cylinderCount\n      maxSpeed\n      weight\n      gearsCount\n      productionStart\n      productionStop\n      active\n      recommended\n    }\n  }\n"): (typeof documents)["\n  mutation CreateEngine($input: CreateCatalogEngineInput!) {\n    createEngine(input: $input) {\n      id\n      name\n      generationId\n      generation {\n        id\n        name\n        slug\n      }\n      fuelType\n      transmissionType\n      driveType\n      consumptionCombined\n      consumptionCity\n      consumptionOutOfCity\n      performance\n      torque\n      volume\n      emission\n      rangeKm\n      acceleration\n      fuelTankVolume\n      cylinderCount\n      maxSpeed\n      weight\n      gearsCount\n      productionStart\n      productionStop\n      active\n      recommended\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation UpdateEngine($id: String!, $input: UpdateCatalogEngineInput!) {\n    updateEngine(id: $id, input: $input) {\n      id\n      name\n      generationId\n      generation {\n        id\n        name\n        slug\n      }\n      fuelType\n      transmissionType\n      driveType\n      consumptionCombined\n      consumptionCity\n      consumptionOutOfCity\n      performance\n      torque\n      volume\n      emission\n      rangeKm\n      acceleration\n      fuelTankVolume\n      cylinderCount\n      maxSpeed\n      weight\n      gearsCount\n      productionStart\n      productionStop\n      active\n      recommended\n    }\n  }\n"): (typeof documents)["\n  mutation UpdateEngine($id: String!, $input: UpdateCatalogEngineInput!) {\n    updateEngine(id: $id, input: $input) {\n      id\n      name\n      generationId\n      generation {\n        id\n        name\n        slug\n      }\n      fuelType\n      transmissionType\n      driveType\n      consumptionCombined\n      consumptionCity\n      consumptionOutOfCity\n      performance\n      torque\n      volume\n      emission\n      rangeKm\n      acceleration\n      fuelTankVolume\n      cylinderCount\n      maxSpeed\n      weight\n      gearsCount\n      productionStart\n      productionStop\n      active\n      recommended\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation DeleteEngine($id: String!) {\n    deleteEngine(id: $id)\n  }\n"): (typeof documents)["\n  mutation DeleteEngine($id: String!) {\n    deleteEngine(id: $id)\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query GetAllEquipmentItems($limit: Float, $offset: Float) {\n    allEquipmentItems(limit: $limit, offset: $offset) {\n      id\n      name\n      legacySystemId\n      createdAt\n      updatedAt\n    }\n  }\n"): (typeof documents)["\n  query GetAllEquipmentItems($limit: Float, $offset: Float) {\n    allEquipmentItems(limit: $limit, offset: $offset) {\n      id\n      name\n      legacySystemId\n      createdAt\n      updatedAt\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query GetEquipmentItem($id: String!) {\n    equipmentItem(id: $id) {\n      id\n      name\n      legacySystemId\n      createdAt\n      updatedAt\n    }\n  }\n"): (typeof documents)["\n  query GetEquipmentItem($id: String!) {\n    equipmentItem(id: $id) {\n      id\n      name\n      legacySystemId\n      createdAt\n      updatedAt\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query SearchEquipmentItems($query: String!, $limit: Float) {\n    searchEquipmentItems(query: $query, limit: $limit) {\n      id\n      name\n      legacySystemId\n    }\n  }\n"): (typeof documents)["\n  query SearchEquipmentItems($query: String!, $limit: Float) {\n    searchEquipmentItems(query: $query, limit: $limit) {\n      id\n      name\n      legacySystemId\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query GetEquipmentItemsCount {\n    equipmentItemsCount\n  }\n"): (typeof documents)["\n  query GetEquipmentItemsCount {\n    equipmentItemsCount\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation CreateEquipmentItem($input: CreateCatalogBrandEquipmentItemInput!) {\n    createEquipmentItem(input: $input) {\n      id\n      name\n      legacySystemId\n      createdAt\n      updatedAt\n    }\n  }\n"): (typeof documents)["\n  mutation CreateEquipmentItem($input: CreateCatalogBrandEquipmentItemInput!) {\n    createEquipmentItem(input: $input) {\n      id\n      name\n      legacySystemId\n      createdAt\n      updatedAt\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation UpdateEquipmentItem($id: String!, $input: UpdateCatalogBrandEquipmentItemInput!) {\n    updateEquipmentItem(id: $id, input: $input) {\n      id\n      name\n      legacySystemId\n      createdAt\n      updatedAt\n    }\n  }\n"): (typeof documents)["\n  mutation UpdateEquipmentItem($id: String!, $input: UpdateCatalogBrandEquipmentItemInput!) {\n    updateEquipmentItem(id: $id, input: $input) {\n      id\n      name\n      legacySystemId\n      createdAt\n      updatedAt\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation DeleteEquipmentItem($id: String!) {\n    deleteEquipmentItem(id: $id)\n  }\n"): (typeof documents)["\n  mutation DeleteEquipmentItem($id: String!) {\n    deleteEquipmentItem(id: $id)\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query GetAllCatalogModelGenerations($limit: Float, $offset: Float, $modelId: String, $isActive: Boolean) {\n    catalogModelGenerations(limit: $limit, offset: $offset, modelId: $modelId, isActive: $isActive) {\n      id\n      name\n      slug\n      legacySlug\n      description\n      productionStart\n      productionStop\n      wheelbase\n      frontTrack\n      rearTrack\n      length\n      width\n      height\n      trunkSpaceMin\n      trunkSpaceMax\n      bodyType\n      frontBrakesType\n      rearBrakesType\n      isActive\n      legacySystemId\n      modelId\n      model {\n        id\n        name\n        slug\n        brand {\n          id\n          name\n          slug\n        }\n      }\n      brandId\n      brand {\n        id\n        name\n        slug\n      }\n      createdAt\n    }\n  }\n"): (typeof documents)["\n  query GetAllCatalogModelGenerations($limit: Float, $offset: Float, $modelId: String, $isActive: Boolean) {\n    catalogModelGenerations(limit: $limit, offset: $offset, modelId: $modelId, isActive: $isActive) {\n      id\n      name\n      slug\n      legacySlug\n      description\n      productionStart\n      productionStop\n      wheelbase\n      frontTrack\n      rearTrack\n      length\n      width\n      height\n      trunkSpaceMin\n      trunkSpaceMax\n      bodyType\n      frontBrakesType\n      rearBrakesType\n      isActive\n      legacySystemId\n      modelId\n      model {\n        id\n        name\n        slug\n        brand {\n          id\n          name\n          slug\n        }\n      }\n      brandId\n      brand {\n        id\n        name\n        slug\n      }\n      createdAt\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query GetCatalogModelGeneration($id: String!) {\n    catalogModelGeneration(id: $id) {\n      id\n      name\n      slug\n      legacySlug\n      description\n      productionStart\n      productionStop\n      wheelbase\n      frontTrack\n      rearTrack\n      length\n      width\n      height\n      trunkSpaceMin\n      trunkSpaceMax\n      bodyType\n      frontBrakesType\n      rearBrakesType\n      isActive\n      legacySystemId\n      modelId\n      model {\n        id\n        name\n        slug\n        brand {\n          id\n          name\n          slug\n        }\n      }\n      brandId\n      brand {\n        id\n        name\n        slug\n      }\n      createdAt\n    }\n  }\n"): (typeof documents)["\n  query GetCatalogModelGeneration($id: String!) {\n    catalogModelGeneration(id: $id) {\n      id\n      name\n      slug\n      legacySlug\n      description\n      productionStart\n      productionStop\n      wheelbase\n      frontTrack\n      rearTrack\n      length\n      width\n      height\n      trunkSpaceMin\n      trunkSpaceMax\n      bodyType\n      frontBrakesType\n      rearBrakesType\n      isActive\n      legacySystemId\n      modelId\n      model {\n        id\n        name\n        slug\n        brand {\n          id\n          name\n          slug\n        }\n      }\n      brandId\n      brand {\n        id\n        name\n        slug\n      }\n      createdAt\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation CreateCatalogModelGeneration($input: CreateCatalogModelGenerationInput!) {\n    createCatalogModelGeneration(input: $input) {\n      id\n      name\n      slug\n      legacySlug\n      description\n      productionStart\n      productionStop\n      wheelbase\n      frontTrack\n      rearTrack\n      length\n      width\n      height\n      trunkSpaceMin\n      trunkSpaceMax\n      bodyType\n      frontBrakesType\n      rearBrakesType\n      isActive\n      modelId\n      model {\n        id\n        name\n        slug\n      }\n      brandId\n      brand {\n        id\n        name\n        slug\n      }\n      createdAt\n    }\n  }\n"): (typeof documents)["\n  mutation CreateCatalogModelGeneration($input: CreateCatalogModelGenerationInput!) {\n    createCatalogModelGeneration(input: $input) {\n      id\n      name\n      slug\n      legacySlug\n      description\n      productionStart\n      productionStop\n      wheelbase\n      frontTrack\n      rearTrack\n      length\n      width\n      height\n      trunkSpaceMin\n      trunkSpaceMax\n      bodyType\n      frontBrakesType\n      rearBrakesType\n      isActive\n      modelId\n      model {\n        id\n        name\n        slug\n      }\n      brandId\n      brand {\n        id\n        name\n        slug\n      }\n      createdAt\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation UpdateCatalogModelGeneration($id: String!, $input: UpdateCatalogModelGenerationInput!) {\n    updateCatalogModelGeneration(id: $id, input: $input) {\n      id\n      name\n      slug\n      legacySlug\n      description\n      productionStart\n      productionStop\n      wheelbase\n      frontTrack\n      rearTrack\n      length\n      width\n      height\n      trunkSpaceMin\n      trunkSpaceMax\n      bodyType\n      frontBrakesType\n      rearBrakesType\n      isActive\n      modelId\n      model {\n        id\n        name\n        slug\n      }\n      brandId\n      brand {\n        id\n        name\n        slug\n      }\n      createdAt\n    }\n  }\n"): (typeof documents)["\n  mutation UpdateCatalogModelGeneration($id: String!, $input: UpdateCatalogModelGenerationInput!) {\n    updateCatalogModelGeneration(id: $id, input: $input) {\n      id\n      name\n      slug\n      legacySlug\n      description\n      productionStart\n      productionStop\n      wheelbase\n      frontTrack\n      rearTrack\n      length\n      width\n      height\n      trunkSpaceMin\n      trunkSpaceMax\n      bodyType\n      frontBrakesType\n      rearBrakesType\n      isActive\n      modelId\n      model {\n        id\n        name\n        slug\n      }\n      brandId\n      brand {\n        id\n        name\n        slug\n      }\n      createdAt\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation DeleteCatalogModelGeneration($id: String!) {\n    deleteCatalogModelGeneration(id: $id)\n  }\n"): (typeof documents)["\n  mutation DeleteCatalogModelGeneration($id: String!) {\n    deleteCatalogModelGeneration(id: $id)\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query CheckGenerationSlug($slug: String!) {\n    catalogModelGenerationBySlug(slug: $slug) {\n      id\n      slug\n    }\n  }\n"): (typeof documents)["\n  query CheckGenerationSlug($slug: String!) {\n    catalogModelGenerationBySlug(slug: $slug) {\n      id\n      slug\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query GetAllLeasingCompanies {\n    leasingCompanies {\n      id\n      name\n      link\n      logoId\n      logo {\n        id\n        url\n        alt\n      }\n      createdAt\n      updatedAt\n    }\n  }\n"): (typeof documents)["\n  query GetAllLeasingCompanies {\n    leasingCompanies {\n      id\n      name\n      link\n      logoId\n      logo {\n        id\n        url\n        alt\n      }\n      createdAt\n      updatedAt\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query GetLeasingCompany($id: String!) {\n    leasingCompany(id: $id) {\n      id\n      name\n      link\n      logoId\n      logo {\n        id\n        url\n        alt\n      }\n      createdAt\n      updatedAt\n    }\n  }\n"): (typeof documents)["\n  query GetLeasingCompany($id: String!) {\n    leasingCompany(id: $id) {\n      id\n      name\n      link\n      logoId\n      logo {\n        id\n        url\n        alt\n      }\n      createdAt\n      updatedAt\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation CreateLeasingCompany($input: CreateLeasingCompanyInput!) {\n    createLeasingCompany(input: $input) {\n      id\n      name\n      link\n      logoId\n      createdAt\n      updatedAt\n    }\n  }\n"): (typeof documents)["\n  mutation CreateLeasingCompany($input: CreateLeasingCompanyInput!) {\n    createLeasingCompany(input: $input) {\n      id\n      name\n      link\n      logoId\n      createdAt\n      updatedAt\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation UpdateLeasingCompany($id: String!, $input: UpdateLeasingCompanyInput!) {\n    updateLeasingCompany(id: $id, input: $input) {\n      id\n      name\n      link\n      logoId\n      logo {\n        id\n        url\n        alt\n      }\n      createdAt\n      updatedAt\n    }\n  }\n"): (typeof documents)["\n  mutation UpdateLeasingCompany($id: String!, $input: UpdateLeasingCompanyInput!) {\n    updateLeasingCompany(id: $id, input: $input) {\n      id\n      name\n      link\n      logoId\n      logo {\n        id\n        url\n        alt\n      }\n      createdAt\n      updatedAt\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation DeleteLeasingCompany($id: String!) {\n    deleteLeasingCompany(id: $id)\n  }\n"): (typeof documents)["\n  mutation DeleteLeasingCompany($id: String!) {\n    deleteLeasingCompany(id: $id)\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query CountLeasingCompanies {\n    leasingCompaniesCount\n  }\n"): (typeof documents)["\n  query CountLeasingCompanies {\n    leasingCompaniesCount\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query GetAllCatalogModels($limit: Float, $offset: Float) {\n    allCatalogModels(limit: $limit, offset: $offset) {\n      id\n      name\n      slug\n      description\n      isActive\n      isHighlighted\n      isRecommended\n      legacySystemId\n      legacySlug\n      brandId\n      brand {\n        id\n        name\n        slug\n      }\n      createdAt\n      updatedAt\n    }\n  }\n"): (typeof documents)["\n  query GetAllCatalogModels($limit: Float, $offset: Float) {\n    allCatalogModels(limit: $limit, offset: $offset) {\n      id\n      name\n      slug\n      description\n      isActive\n      isHighlighted\n      isRecommended\n      legacySystemId\n      legacySlug\n      brandId\n      brand {\n        id\n        name\n        slug\n      }\n      createdAt\n      updatedAt\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query GetCatalogModel($id: String!) {\n    catalogModel(id: $id) {\n      id\n      name\n      slug\n      description\n      isActive\n      isHighlighted\n      isRecommended\n      legacySystemId\n      legacySlug\n      brandId\n      brand {\n        id\n        name\n        slug\n      }\n      createdAt\n      updatedAt\n    }\n  }\n"): (typeof documents)["\n  query GetCatalogModel($id: String!) {\n    catalogModel(id: $id) {\n      id\n      name\n      slug\n      description\n      isActive\n      isHighlighted\n      isRecommended\n      legacySystemId\n      legacySlug\n      brandId\n      brand {\n        id\n        name\n        slug\n      }\n      createdAt\n      updatedAt\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation CreateCatalogModel($input: CreateCatalogModelInput!) {\n    createCatalogModel(input: $input) {\n      id\n      name\n      slug\n      description\n      isActive\n      isHighlighted\n      isRecommended\n      legacySystemId\n      legacySlug\n      brandId\n      brand {\n        id\n        name\n        slug\n      }\n      createdAt\n      updatedAt\n    }\n  }\n"): (typeof documents)["\n  mutation CreateCatalogModel($input: CreateCatalogModelInput!) {\n    createCatalogModel(input: $input) {\n      id\n      name\n      slug\n      description\n      isActive\n      isHighlighted\n      isRecommended\n      legacySystemId\n      legacySlug\n      brandId\n      brand {\n        id\n        name\n        slug\n      }\n      createdAt\n      updatedAt\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation UpdateCatalogModel($id: String!, $input: UpdateCatalogModelInput!) {\n    updateCatalogModel(id: $id, input: $input) {\n      id\n      name\n      slug\n      description\n      isActive\n      isHighlighted\n      isRecommended\n      brandId\n      brand {\n        id\n        name\n        slug\n      }\n      createdAt\n      updatedAt\n    }\n  }\n"): (typeof documents)["\n  mutation UpdateCatalogModel($id: String!, $input: UpdateCatalogModelInput!) {\n    updateCatalogModel(id: $id, input: $input) {\n      id\n      name\n      slug\n      description\n      isActive\n      isHighlighted\n      isRecommended\n      brandId\n      brand {\n        id\n        name\n        slug\n      }\n      createdAt\n      updatedAt\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation DeleteCatalogModel($id: String!) {\n    deleteCatalogModel(id: $id)\n  }\n"): (typeof documents)["\n  mutation DeleteCatalogModel($id: String!) {\n    deleteCatalogModel(id: $id)\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query GetCatalogModelsByBrand($brandId: String!, $limit: Float, $offset: Float) {\n    allCatalogModels(limit: $limit, offset: $offset) {\n      id\n      name\n      slug\n      brandId\n      brand {\n        id\n        name\n        slug\n      }\n    }\n  }\n"): (typeof documents)["\n  query GetCatalogModelsByBrand($brandId: String!, $limit: Float, $offset: Float) {\n    allCatalogModels(limit: $limit, offset: $offset) {\n      id\n      name\n      slug\n      brandId\n      brand {\n        id\n        name\n        slug\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query CheckModelSlug($slug: String!) {\n    catalogModelBySlug(slug: $slug) {\n      id\n      slug\n    }\n  }\n"): (typeof documents)["\n  query CheckModelSlug($slug: String!) {\n    catalogModelBySlug(slug: $slug) {\n      id\n      slug\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query GetAllVehicleOffers($filters: OfferFiltersInput) {\n    allOffers(filters: $filters) {\n      __typename\n      id\n      type\n      isPublic\n      isActive\n      totalPrice\n      description\n      slug\n      modelGenerationId\n      brandId\n      modelId\n      createdAt\n      updatedAt\n\n      modelGeneration {\n        id\n        name\n      }\n\n      # Operational Leasing fields (will be null for other types)\n      leasingDurationMonths\n      monthlyPayment\n      annualMileageLimit\n      downPaymentLeasing\n      hasServiceIncluded\n      hasWinterTyresIncluded\n      hasAssistanceServiceIncluded\n      hasGapIncluded\n\n      # Direct Purchase fields (will be null for other types)\n      discountAmount\n      discountPercentage\n      includesWarranty\n      warrantyYears\n      financingAvailable\n\n      # Individual Offer fields (will be null for other types)\n      customerId\n      status\n      customRequirements\n      internalNotes\n      assignedToId\n      responseDeadline\n    }\n  }\n"): (typeof documents)["\n  query GetAllVehicleOffers($filters: OfferFiltersInput) {\n    allOffers(filters: $filters) {\n      __typename\n      id\n      type\n      isPublic\n      isActive\n      totalPrice\n      description\n      slug\n      modelGenerationId\n      brandId\n      modelId\n      createdAt\n      updatedAt\n\n      modelGeneration {\n        id\n        name\n      }\n\n      # Operational Leasing fields (will be null for other types)\n      leasingDurationMonths\n      monthlyPayment\n      annualMileageLimit\n      downPaymentLeasing\n      hasServiceIncluded\n      hasWinterTyresIncluded\n      hasAssistanceServiceIncluded\n      hasGapIncluded\n\n      # Direct Purchase fields (will be null for other types)\n      discountAmount\n      discountPercentage\n      includesWarranty\n      warrantyYears\n      financingAvailable\n\n      # Individual Offer fields (will be null for other types)\n      customerId\n      status\n      customRequirements\n      internalNotes\n      assignedToId\n      responseDeadline\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query GetOffer($id: String!) {\n    offer(id: $id) {\n      __typename\n      id\n      type\n      isPublic\n      isActive\n      totalPrice\n      description\n      slug\n      modelGenerationId\n      brandId\n      modelId\n      createdAt\n      updatedAt\n\n      modelGeneration {\n        id\n        name\n      }\n\n      # All possible fields\n      leasingDurationMonths\n      monthlyPayment\n      annualMileageLimit\n      downPaymentLeasing\n      hasServiceIncluded\n      hasWinterTyresIncluded\n      hasAssistanceServiceIncluded\n      hasGapIncluded\n\n      discountAmount\n      discountPercentage\n      includesWarranty\n      warrantyYears\n      financingAvailable\n\n      customerId\n      status\n      customRequirements\n      internalNotes\n      assignedToId\n      responseDeadline\n    }\n  }\n"): (typeof documents)["\n  query GetOffer($id: String!) {\n    offer(id: $id) {\n      __typename\n      id\n      type\n      isPublic\n      isActive\n      totalPrice\n      description\n      slug\n      modelGenerationId\n      brandId\n      modelId\n      createdAt\n      updatedAt\n\n      modelGeneration {\n        id\n        name\n      }\n\n      # All possible fields\n      leasingDurationMonths\n      monthlyPayment\n      annualMileageLimit\n      downPaymentLeasing\n      hasServiceIncluded\n      hasWinterTyresIncluded\n      hasAssistanceServiceIncluded\n      hasGapIncluded\n\n      discountAmount\n      discountPercentage\n      includesWarranty\n      warrantyYears\n      financingAvailable\n\n      customerId\n      status\n      customRequirements\n      internalNotes\n      assignedToId\n      responseDeadline\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query GetIndividualOffers($filters: OfferFiltersInput) {\n    individualOffers(filters: $filters) {\n      __typename\n      id\n      type\n      isPublic\n      isActive\n      totalPrice\n      description\n      slug\n      modelGenerationId\n      brandId\n      modelId\n      createdAt\n      updatedAt\n\n      modelGeneration {\n        id\n        name\n      }\n\n      customerId\n      status\n      customRequirements\n      internalNotes\n      assignedToId\n      responseDeadline\n    }\n  }\n"): (typeof documents)["\n  query GetIndividualOffers($filters: OfferFiltersInput) {\n    individualOffers(filters: $filters) {\n      __typename\n      id\n      type\n      isPublic\n      isActive\n      totalPrice\n      description\n      slug\n      modelGenerationId\n      brandId\n      modelId\n      createdAt\n      updatedAt\n\n      modelGeneration {\n        id\n        name\n      }\n\n      customerId\n      status\n      customRequirements\n      internalNotes\n      assignedToId\n      responseDeadline\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation CreateOperationalLeasingOffer(\n    $input: CreateOperationalLeasingOfferInput!\n  ) {\n    createOperationalLeasingOffer(input: $input) {\n      __typename\n      id\n      type\n      isPublic\n      isActive\n      totalPrice\n      description\n      slug\n      modelGenerationId\n      brandId\n      modelId\n      createdAt\n      updatedAt\n\n      modelGeneration {\n        id\n        name\n      }\n\n      leasingDurationMonths\n      monthlyPayment\n      annualMileageLimit\n      downPaymentLeasing\n      hasServiceIncluded\n      hasWinterTyresIncluded\n      hasAssistanceServiceIncluded\n      hasGapIncluded\n    }\n  }\n"): (typeof documents)["\n  mutation CreateOperationalLeasingOffer(\n    $input: CreateOperationalLeasingOfferInput!\n  ) {\n    createOperationalLeasingOffer(input: $input) {\n      __typename\n      id\n      type\n      isPublic\n      isActive\n      totalPrice\n      description\n      slug\n      modelGenerationId\n      brandId\n      modelId\n      createdAt\n      updatedAt\n\n      modelGeneration {\n        id\n        name\n      }\n\n      leasingDurationMonths\n      monthlyPayment\n      annualMileageLimit\n      downPaymentLeasing\n      hasServiceIncluded\n      hasWinterTyresIncluded\n      hasAssistanceServiceIncluded\n      hasGapIncluded\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation CreateDirectPurchaseOffer($input: CreateDirectPurchaseOfferInput!) {\n    createDirectPurchaseOffer(input: $input) {\n      __typename\n      id\n      type\n      isPublic\n      isActive\n      totalPrice\n      description\n      slug\n      modelGenerationId\n      brandId\n      modelId\n      createdAt\n      updatedAt\n\n      modelGeneration {\n        id\n        name\n      }\n\n      discountAmount\n      discountPercentage\n      includesWarranty\n      warrantyYears\n      financingAvailable\n    }\n  }\n"): (typeof documents)["\n  mutation CreateDirectPurchaseOffer($input: CreateDirectPurchaseOfferInput!) {\n    createDirectPurchaseOffer(input: $input) {\n      __typename\n      id\n      type\n      isPublic\n      isActive\n      totalPrice\n      description\n      slug\n      modelGenerationId\n      brandId\n      modelId\n      createdAt\n      updatedAt\n\n      modelGeneration {\n        id\n        name\n      }\n\n      discountAmount\n      discountPercentage\n      includesWarranty\n      warrantyYears\n      financingAvailable\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation CreateIndividualOffer($input: CreateIndividualOfferInput!) {\n    createIndividualOffer(input: $input) {\n      __typename\n      id\n      type\n      isPublic\n      isActive\n      totalPrice\n      description\n      slug\n      modelGenerationId\n      brandId\n      modelId\n      createdAt\n      updatedAt\n\n      modelGeneration {\n        id\n        name\n      }\n\n      customerId\n      status\n      customRequirements\n      internalNotes\n      assignedToId\n      responseDeadline\n    }\n  }\n"): (typeof documents)["\n  mutation CreateIndividualOffer($input: CreateIndividualOfferInput!) {\n    createIndividualOffer(input: $input) {\n      __typename\n      id\n      type\n      isPublic\n      isActive\n      totalPrice\n      description\n      slug\n      modelGenerationId\n      brandId\n      modelId\n      createdAt\n      updatedAt\n\n      modelGeneration {\n        id\n        name\n      }\n\n      customerId\n      status\n      customRequirements\n      internalNotes\n      assignedToId\n      responseDeadline\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation UpdateOffer($id: String!, $input: UpdateOfferInput!) {\n    updateOffer(id: $id, input: $input) {\n      __typename\n      id\n      type\n      isPublic\n      isActive\n      totalPrice\n      description\n      slug\n      modelGenerationId\n      brandId\n      modelId\n      createdAt\n      updatedAt\n\n      modelGeneration {\n        id\n        name\n      }\n\n      # All possible fields\n      leasingDurationMonths\n      monthlyPayment\n      annualMileageLimit\n      downPaymentLeasing\n      hasServiceIncluded\n      hasWinterTyresIncluded\n      hasAssistanceServiceIncluded\n      hasGapIncluded\n\n      discountAmount\n      discountPercentage\n      includesWarranty\n      warrantyYears\n      financingAvailable\n\n      customerId\n      status\n      customRequirements\n      internalNotes\n      assignedToId\n      responseDeadline\n    }\n  }\n"): (typeof documents)["\n  mutation UpdateOffer($id: String!, $input: UpdateOfferInput!) {\n    updateOffer(id: $id, input: $input) {\n      __typename\n      id\n      type\n      isPublic\n      isActive\n      totalPrice\n      description\n      slug\n      modelGenerationId\n      brandId\n      modelId\n      createdAt\n      updatedAt\n\n      modelGeneration {\n        id\n        name\n      }\n\n      # All possible fields\n      leasingDurationMonths\n      monthlyPayment\n      annualMileageLimit\n      downPaymentLeasing\n      hasServiceIncluded\n      hasWinterTyresIncluded\n      hasAssistanceServiceIncluded\n      hasGapIncluded\n\n      discountAmount\n      discountPercentage\n      includesWarranty\n      warrantyYears\n      financingAvailable\n\n      customerId\n      status\n      customRequirements\n      internalNotes\n      assignedToId\n      responseDeadline\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation UpdateIndividualOfferStatus(\n    $id: String!\n    $status: IndividualOfferStatus!\n  ) {\n    updateIndividualOfferStatus(id: $id, status: $status) {\n      __typename\n      id\n      type\n      isPublic\n      isActive\n      totalPrice\n      description\n      slug\n      modelGenerationId\n      brandId\n      modelId\n      createdAt\n      updatedAt\n\n      modelGeneration {\n        id\n        name\n      }\n\n      customerId\n      status\n      customRequirements\n      internalNotes\n      assignedToId\n      responseDeadline\n    }\n  }\n"): (typeof documents)["\n  mutation UpdateIndividualOfferStatus(\n    $id: String!\n    $status: IndividualOfferStatus!\n  ) {\n    updateIndividualOfferStatus(id: $id, status: $status) {\n      __typename\n      id\n      type\n      isPublic\n      isActive\n      totalPrice\n      description\n      slug\n      modelGenerationId\n      brandId\n      modelId\n      createdAt\n      updatedAt\n\n      modelGeneration {\n        id\n        name\n      }\n\n      customerId\n      status\n      customRequirements\n      internalNotes\n      assignedToId\n      responseDeadline\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation DeleteOffer($id: String!) {\n    deleteOffer(id: $id)\n  }\n"): (typeof documents)["\n  mutation DeleteOffer($id: String!) {\n    deleteOffer(id: $id)\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query GetAllOnboardings($status: OnboardingStatus, $leasingCompanyId: String) {\n    allOnboardings(status: $status, leasingCompanyId: $leasingCompanyId) {\n      id\n      token\n      status\n      expiresAt\n      completedAt\n      createdAt\n      updatedAt\n      carRequest {\n        id\n        requestFirstName\n        requestLastName\n        requestEmail\n        customer {\n          id\n          firstName\n          lastName\n          email\n        }\n      }\n      leasingCompany {\n        id\n        name\n        logo {\n          id\n          url\n        }\n      }\n      documents {\n        id\n        validationStatus\n      }\n    }\n  }\n"): (typeof documents)["\n  query GetAllOnboardings($status: OnboardingStatus, $leasingCompanyId: String) {\n    allOnboardings(status: $status, leasingCompanyId: $leasingCompanyId) {\n      id\n      token\n      status\n      expiresAt\n      completedAt\n      createdAt\n      updatedAt\n      carRequest {\n        id\n        requestFirstName\n        requestLastName\n        requestEmail\n        customer {\n          id\n          firstName\n          lastName\n          email\n        }\n      }\n      leasingCompany {\n        id\n        name\n        logo {\n          id\n          url\n        }\n      }\n      documents {\n        id\n        validationStatus\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query GetOnboarding($id: String!) {\n    onboarding(id: $id) {\n      id\n      token\n      status\n      expiresAt\n      completedAt\n      lastReminderSentAt\n      createdAt\n      updatedAt\n      carRequest {\n        id\n        requestFirstName\n        requestLastName\n        requestEmail\n        requestPhone\n        financingType\n        customer {\n          id\n          firstName\n          lastName\n          email\n          phone\n        }\n        brand {\n          id\n          name\n        }\n        model {\n          id\n          name\n        }\n      }\n      leasingCompany {\n        id\n        name\n        link\n        logo {\n          id\n          url\n        }\n      }\n      documents {\n        id\n        uploadedAt\n        updatedAt\n        validationStatus\n        validationNote\n        validatedAt\n        file {\n          id\n          name\n          url\n          relativePath\n          size\n          sizeFormatted\n          mimeType\n          extension\n        }\n        documentTemplate {\n          id\n          name\n          fieldName\n          description\n          helpText\n          isRequired\n          acceptedFormats\n          maxSizeBytes\n        }\n        validatedBy {\n          id\n          firstName\n          lastName\n          email\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query GetOnboarding($id: String!) {\n    onboarding(id: $id) {\n      id\n      token\n      status\n      expiresAt\n      completedAt\n      lastReminderSentAt\n      createdAt\n      updatedAt\n      carRequest {\n        id\n        requestFirstName\n        requestLastName\n        requestEmail\n        requestPhone\n        financingType\n        customer {\n          id\n          firstName\n          lastName\n          email\n          phone\n        }\n        brand {\n          id\n          name\n        }\n        model {\n          id\n          name\n        }\n      }\n      leasingCompany {\n        id\n        name\n        link\n        logo {\n          id\n          url\n        }\n      }\n      documents {\n        id\n        uploadedAt\n        updatedAt\n        validationStatus\n        validationNote\n        validatedAt\n        file {\n          id\n          name\n          url\n          relativePath\n          size\n          sizeFormatted\n          mimeType\n          extension\n        }\n        documentTemplate {\n          id\n          name\n          fieldName\n          description\n          helpText\n          isRequired\n          acceptedFormats\n          maxSizeBytes\n        }\n        validatedBy {\n          id\n          firstName\n          lastName\n          email\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query GetRequiredDocumentsForOnboarding($onboardingId: String!) {\n    requiredDocumentsForOnboarding(onboardingId: $onboardingId) {\n      id\n      name\n      fieldName\n      description\n      helpText\n      isRequired\n      acceptedFormats\n      maxSizeBytes\n      displayOrder\n    }\n  }\n"): (typeof documents)["\n  query GetRequiredDocumentsForOnboarding($onboardingId: String!) {\n    requiredDocumentsForOnboarding(onboardingId: $onboardingId) {\n      id\n      name\n      fieldName\n      description\n      helpText\n      isRequired\n      acceptedFormats\n      maxSizeBytes\n      displayOrder\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation CreateOnboarding($carRequestId: String!, $expirationDays: Float) {\n    createOnboarding(carRequestId: $carRequestId, expirationDays: $expirationDays) {\n      id\n      token\n      status\n      expiresAt\n      createdAt\n    }\n  }\n"): (typeof documents)["\n  mutation CreateOnboarding($carRequestId: String!, $expirationDays: Float) {\n    createOnboarding(carRequestId: $carRequestId, expirationDays: $expirationDays) {\n      id\n      token\n      status\n      expiresAt\n      createdAt\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation ValidateDocument($documentId: String!, $input: ValidateDocumentInput!) {\n    validateDocument(documentId: $documentId, input: $input) {\n      id\n      validationStatus\n      validationNote\n      validatedAt\n      validatedBy {\n        id\n        firstName\n        lastName\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation ValidateDocument($documentId: String!, $input: ValidateDocumentInput!) {\n    validateDocument(documentId: $documentId, input: $input) {\n      id\n      validationStatus\n      validationNote\n      validatedAt\n      validatedBy {\n        id\n        firstName\n        lastName\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation SendOnboardingReminder($onboardingId: String!) {\n    sendOnboardingReminder(onboardingId: $onboardingId)\n  }\n"): (typeof documents)["\n  mutation SendOnboardingReminder($onboardingId: String!) {\n    sendOnboardingReminder(onboardingId: $onboardingId)\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation UpdateOnboardingStatus($onboardingId: String!, $status: OnboardingStatus!) {\n    updateOnboardingStatus(onboardingId: $onboardingId, status: $status)\n  }\n"): (typeof documents)["\n  mutation UpdateOnboardingStatus($onboardingId: String!, $status: OnboardingStatus!) {\n    updateOnboardingStatus(onboardingId: $onboardingId, status: $status)\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query GetAllUsers($limit: Float, $offset: Float) {\n    users(limit: $limit, offset: $offset) {\n      id\n      email\n      firstName\n      lastName\n      roles\n      phone\n      bio\n      isActive\n      createdAt\n      updatedAt\n    }\n  }\n"): (typeof documents)["\n  query GetAllUsers($limit: Float, $offset: Float) {\n    users(limit: $limit, offset: $offset) {\n      id\n      email\n      firstName\n      lastName\n      roles\n      phone\n      bio\n      isActive\n      createdAt\n      updatedAt\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query GetUser($id: String!) {\n    user(id: $id) {\n      id\n      email\n      firstName\n      lastName\n      roles\n      phone\n      bio\n      isActive\n      createdAt\n      updatedAt\n    }\n  }\n"): (typeof documents)["\n  query GetUser($id: String!) {\n    user(id: $id) {\n      id\n      email\n      firstName\n      lastName\n      roles\n      phone\n      bio\n      isActive\n      createdAt\n      updatedAt\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query SearchUsers($query: String!, $limit: Float) {\n    searchUsers(query: $query, limit: $limit) {\n      id\n      email\n      firstName\n      lastName\n      roles\n      isActive\n    }\n  }\n"): (typeof documents)["\n  query SearchUsers($query: String!, $limit: Float) {\n    searchUsers(query: $query, limit: $limit) {\n      id\n      email\n      firstName\n      lastName\n      roles\n      isActive\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation CreateUser($input: CreateUserInput!) {\n    createUser(input: $input) {\n      id\n      email\n      firstName\n      lastName\n      roles\n      phone\n      bio\n      isActive\n      createdAt\n      updatedAt\n    }\n  }\n"): (typeof documents)["\n  mutation CreateUser($input: CreateUserInput!) {\n    createUser(input: $input) {\n      id\n      email\n      firstName\n      lastName\n      roles\n      phone\n      bio\n      isActive\n      createdAt\n      updatedAt\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation UpdateUser($id: String!, $input: UpdateUserInput!) {\n    updateUser(id: $id, input: $input) {\n      id\n      email\n      firstName\n      lastName\n      roles\n      phone\n      bio\n      isActive\n      createdAt\n      updatedAt\n    }\n  }\n"): (typeof documents)["\n  mutation UpdateUser($id: String!, $input: UpdateUserInput!) {\n    updateUser(id: $id, input: $input) {\n      id\n      email\n      firstName\n      lastName\n      roles\n      phone\n      bio\n      isActive\n      createdAt\n      updatedAt\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation SoftDeleteUser($id: String!) {\n    softDeleteUser(id: $id) {\n      id\n      email\n      firstName\n      lastName\n      isActive\n    }\n  }\n"): (typeof documents)["\n  mutation SoftDeleteUser($id: String!) {\n    softDeleteUser(id: $id) {\n      id\n      email\n      firstName\n      lastName\n      isActive\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation DeleteUser($id: String!) {\n    deleteUser(id: $id)\n  }\n"): (typeof documents)["\n  mutation DeleteUser($id: String!) {\n    deleteUser(id: $id)\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query GetUserAuditLogs($userId: String!, $limit: Float) {\n    userActivity(userId: $userId, limit: $limit) {\n      id\n      entityName\n      entityId\n      action\n      oldValue\n      newValue\n      changes\n      userId\n      userEmail\n      ipAddress\n      userAgent\n      metadata\n      createdAt\n    }\n  }\n"): (typeof documents)["\n  query GetUserAuditLogs($userId: String!, $limit: Float) {\n    userActivity(userId: $userId, limit: $limit) {\n      id\n      entityName\n      entityId\n      action\n      oldValue\n      newValue\n      changes\n      userId\n      userEmail\n      ipAddress\n      userAgent\n      metadata\n      createdAt\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation RefreshTokenInternal($input: RefreshTokenInput!) {\n    refreshToken(input: $input) {\n      accessToken\n      refreshToken\n      user {\n        id\n        email\n        firstName\n        lastName\n        roles\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation RefreshTokenInternal($input: RefreshTokenInput!) {\n    refreshToken(input: $input) {\n      accessToken\n      refreshToken\n      user {\n        id\n        email\n        firstName\n        lastName\n        roles\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation GenerateUploadUrl($filename: String!, $contentType: String!) {\n    generateUploadUrl(filename: $filename, contentType: $contentType)\n  }\n"): (typeof documents)["\n  mutation GenerateUploadUrl($filename: String!, $contentType: String!) {\n    generateUploadUrl(filename: $filename, contentType: $contentType)\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation CreateFile($input: CreateFileInput!) {\n    createFile(input: $input) {\n      id\n      relativePath\n      url\n      name\n      extension\n      size\n      mimeType\n      checksum\n      width\n      height\n      alt\n      title\n      thumbnailPath\n      isImage\n      createdAt\n      updatedAt\n    }\n  }\n"): (typeof documents)["\n  mutation CreateFile($input: CreateFileInput!) {\n    createFile(input: $input) {\n      id\n      relativePath\n      url\n      name\n      extension\n      size\n      mimeType\n      checksum\n      width\n      height\n      alt\n      title\n      thumbnailPath\n      isImage\n      createdAt\n      updatedAt\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation DeleteFile($id: String!) {\n    deleteFile(id: $id)\n  }\n"): (typeof documents)["\n  mutation DeleteFile($id: String!) {\n    deleteFile(id: $id)\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation DeleteFileCompletely($id: String!) {\n    deleteFileCompletely(id: $id)\n  }\n"): (typeof documents)["\n  mutation DeleteFileCompletely($id: String!) {\n    deleteFileCompletely(id: $id)\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query GetFileByChecksum($checksum: String!) {\n    fileByChecksum(checksum: $checksum) {\n      id\n      url\n      relativePath\n      name\n      extension\n      size\n      mimeType\n      checksum\n      width\n      height\n      isImage\n    }\n  }\n"): (typeof documents)["\n  query GetFileByChecksum($checksum: String!) {\n    fileByChecksum(checksum: $checksum) {\n      id\n      url\n      relativePath\n      name\n      extension\n      size\n      mimeType\n      checksum\n      width\n      height\n      isImage\n    }\n  }\n"];

export function graphql(source: string) {
  return (documents as any)[source] ?? {};
}

export type DocumentType<TDocumentNode extends DocumentNode<any, any>> = TDocumentNode extends DocumentNode<  infer TType,  any>  ? TType  : never;